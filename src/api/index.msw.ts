import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";
import type {
  ActionDto,
  ActionsControllerGetActions200,
  BalancesResponseDto,
  HealthStatusDto,
  NetworkDto,
  ProviderDto,
  ProvidersControllerGetProviders200,
  TransactionDto,
  YieldBalancesDto,
  YieldDto,
  YieldsControllerGetYields200,
  YieldsControllerGetYieldValidators200,
} from "./schemas";
import {
  BalanceType,
  ERCStandards,
  HealthStatus,
  RewardClaiming,
  RewardSchedule,
  YieldType,
} from "./schemas";

export const getYieldsControllerGetYieldsResponseMock =
  (): YieldsControllerGetYields200 => ({
    ...{
      total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      offset: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      limit: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
    },
    ...{
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          network: faker.helpers.arrayElement([
            "ethereum",
            "ethereum-goerli",
            "ethereum-holesky",
            "ethereum-sepolia",
            "ethereum-hoodi",
            "arbitrum",
            "base",
            "base-sepolia",
            "gnosis",
            "optimism",
            "polygon",
            "polygon-amoy",
            "starknet",
            "zksync",
            "linea",
            "unichain",
            "avalanche-c",
            "avalanche-c-atomic",
            "avalanche-p",
            "binance",
            "celo",
            "fantom",
            "harmony",
            "moonriver",
            "okc",
            "viction",
            "core",
            "sonic",
            "katana",
            "agoric",
            "akash",
            "axelar",
            "band-protocol",
            "bitsong",
            "canto",
            "chihuahua",
            "comdex",
            "coreum",
            "cosmos",
            "crescent",
            "cronos",
            "cudos",
            "desmos",
            "dydx",
            "evmos",
            "fetch-ai",
            "gravity-bridge",
            "injective",
            "irisnet",
            "juno",
            "kava",
            "ki-network",
            "mars-protocol",
            "nym",
            "okex-chain",
            "onomy",
            "osmosis",
            "persistence",
            "quicksilver",
            "regen",
            "secret",
            "sentinel",
            "sommelier",
            "stafi",
            "stargaze",
            "stride",
            "teritori",
            "tgrade",
            "umee",
            "sei",
            "mantra",
            "celestia",
            "saga",
            "zetachain",
            "dymension",
            "humansai",
            "neutron",
            "polkadot",
            "kusama",
            "westend",
            "bittensor",
            "binancebeacon",
            "cardano",
            "near",
            "solana",
            "solana-devnet",
            "stellar",
            "stellar-testnet",
            "tezos",
            "tron",
            "ton",
            "ton-testnet",
          ] as const),
          inputTokens: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            decimals: faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            network: faker.helpers.arrayElement([
              "ethereum",
              "ethereum-goerli",
              "ethereum-holesky",
              "ethereum-sepolia",
              "ethereum-hoodi",
              "arbitrum",
              "base",
              "base-sepolia",
              "gnosis",
              "optimism",
              "polygon",
              "polygon-amoy",
              "starknet",
              "zksync",
              "linea",
              "unichain",
              "avalanche-c",
              "avalanche-c-atomic",
              "avalanche-p",
              "binance",
              "celo",
              "fantom",
              "harmony",
              "moonriver",
              "okc",
              "viction",
              "core",
              "sonic",
              "katana",
              "agoric",
              "akash",
              "axelar",
              "band-protocol",
              "bitsong",
              "canto",
              "chihuahua",
              "comdex",
              "coreum",
              "cosmos",
              "crescent",
              "cronos",
              "cudos",
              "desmos",
              "dydx",
              "evmos",
              "fetch-ai",
              "gravity-bridge",
              "injective",
              "irisnet",
              "juno",
              "kava",
              "ki-network",
              "mars-protocol",
              "nym",
              "okex-chain",
              "onomy",
              "osmosis",
              "persistence",
              "quicksilver",
              "regen",
              "secret",
              "sentinel",
              "sommelier",
              "stafi",
              "stargaze",
              "stride",
              "teritori",
              "tgrade",
              "umee",
              "sei",
              "mantra",
              "celestia",
              "saga",
              "zetachain",
              "dymension",
              "humansai",
              "neutron",
              "polkadot",
              "kusama",
              "westend",
              "bittensor",
              "binancebeacon",
              "cardano",
              "near",
              "solana",
              "solana-devnet",
              "stellar",
              "stellar-testnet",
              "tezos",
              "tron",
              "ton",
              "ton-testnet",
            ] as const),
            address: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            logoURI: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            isPoints: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            coinGeckoId: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          })),
          outputToken: faker.helpers.arrayElement([
            {
              ...{
                symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                decimals: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                network: faker.helpers.arrayElement([
                  "ethereum",
                  "ethereum-goerli",
                  "ethereum-holesky",
                  "ethereum-sepolia",
                  "ethereum-hoodi",
                  "arbitrum",
                  "base",
                  "base-sepolia",
                  "gnosis",
                  "optimism",
                  "polygon",
                  "polygon-amoy",
                  "starknet",
                  "zksync",
                  "linea",
                  "unichain",
                  "avalanche-c",
                  "avalanche-c-atomic",
                  "avalanche-p",
                  "binance",
                  "celo",
                  "fantom",
                  "harmony",
                  "moonriver",
                  "okc",
                  "viction",
                  "core",
                  "sonic",
                  "katana",
                  "agoric",
                  "akash",
                  "axelar",
                  "band-protocol",
                  "bitsong",
                  "canto",
                  "chihuahua",
                  "comdex",
                  "coreum",
                  "cosmos",
                  "crescent",
                  "cronos",
                  "cudos",
                  "desmos",
                  "dydx",
                  "evmos",
                  "fetch-ai",
                  "gravity-bridge",
                  "injective",
                  "irisnet",
                  "juno",
                  "kava",
                  "ki-network",
                  "mars-protocol",
                  "nym",
                  "okex-chain",
                  "onomy",
                  "osmosis",
                  "persistence",
                  "quicksilver",
                  "regen",
                  "secret",
                  "sentinel",
                  "sommelier",
                  "stafi",
                  "stargaze",
                  "stride",
                  "teritori",
                  "tgrade",
                  "umee",
                  "sei",
                  "mantra",
                  "celestia",
                  "saga",
                  "zetachain",
                  "dymension",
                  "humansai",
                  "neutron",
                  "polkadot",
                  "kusama",
                  "westend",
                  "bittensor",
                  "binancebeacon",
                  "cardano",
                  "near",
                  "solana",
                  "solana-devnet",
                  "stellar",
                  "stellar-testnet",
                  "tezos",
                  "tron",
                  "ton",
                  "ton-testnet",
                ] as const),
                address: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                logoURI: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                isPoints: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
                coinGeckoId: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          token: {
            ...{
              symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              decimals: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              network: faker.helpers.arrayElement([
                "ethereum",
                "ethereum-goerli",
                "ethereum-holesky",
                "ethereum-sepolia",
                "ethereum-hoodi",
                "arbitrum",
                "base",
                "base-sepolia",
                "gnosis",
                "optimism",
                "polygon",
                "polygon-amoy",
                "starknet",
                "zksync",
                "linea",
                "unichain",
                "avalanche-c",
                "avalanche-c-atomic",
                "avalanche-p",
                "binance",
                "celo",
                "fantom",
                "harmony",
                "moonriver",
                "okc",
                "viction",
                "core",
                "sonic",
                "katana",
                "agoric",
                "akash",
                "axelar",
                "band-protocol",
                "bitsong",
                "canto",
                "chihuahua",
                "comdex",
                "coreum",
                "cosmos",
                "crescent",
                "cronos",
                "cudos",
                "desmos",
                "dydx",
                "evmos",
                "fetch-ai",
                "gravity-bridge",
                "injective",
                "irisnet",
                "juno",
                "kava",
                "ki-network",
                "mars-protocol",
                "nym",
                "okex-chain",
                "onomy",
                "osmosis",
                "persistence",
                "quicksilver",
                "regen",
                "secret",
                "sentinel",
                "sommelier",
                "stafi",
                "stargaze",
                "stride",
                "teritori",
                "tgrade",
                "umee",
                "sei",
                "mantra",
                "celestia",
                "saga",
                "zetachain",
                "dymension",
                "humansai",
                "neutron",
                "polkadot",
                "kusama",
                "westend",
                "bittensor",
                "binancebeacon",
                "cardano",
                "near",
                "solana",
                "solana-devnet",
                "stellar",
                "stellar-testnet",
                "tezos",
                "tron",
                "ton",
                "ton-testnet",
              ] as const),
              address: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              logoURI: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              isPoints: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              coinGeckoId: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
          },
          rewardRate: {
            ...{
              total: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
              components: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                rate: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                token: {
                  ...{
                    symbol: faker.string.alpha({
                      length: { min: 10, max: 20 },
                    }),
                    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                    decimals: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    network: faker.helpers.arrayElement([
                      "ethereum",
                      "ethereum-goerli",
                      "ethereum-holesky",
                      "ethereum-sepolia",
                      "ethereum-hoodi",
                      "arbitrum",
                      "base",
                      "base-sepolia",
                      "gnosis",
                      "optimism",
                      "polygon",
                      "polygon-amoy",
                      "starknet",
                      "zksync",
                      "linea",
                      "unichain",
                      "avalanche-c",
                      "avalanche-c-atomic",
                      "avalanche-p",
                      "binance",
                      "celo",
                      "fantom",
                      "harmony",
                      "moonriver",
                      "okc",
                      "viction",
                      "core",
                      "sonic",
                      "katana",
                      "agoric",
                      "akash",
                      "axelar",
                      "band-protocol",
                      "bitsong",
                      "canto",
                      "chihuahua",
                      "comdex",
                      "coreum",
                      "cosmos",
                      "crescent",
                      "cronos",
                      "cudos",
                      "desmos",
                      "dydx",
                      "evmos",
                      "fetch-ai",
                      "gravity-bridge",
                      "injective",
                      "irisnet",
                      "juno",
                      "kava",
                      "ki-network",
                      "mars-protocol",
                      "nym",
                      "okex-chain",
                      "onomy",
                      "osmosis",
                      "persistence",
                      "quicksilver",
                      "regen",
                      "secret",
                      "sentinel",
                      "sommelier",
                      "stafi",
                      "stargaze",
                      "stride",
                      "teritori",
                      "tgrade",
                      "umee",
                      "sei",
                      "mantra",
                      "celestia",
                      "saga",
                      "zetachain",
                      "dymension",
                      "humansai",
                      "neutron",
                      "polkadot",
                      "kusama",
                      "westend",
                      "bittensor",
                      "binancebeacon",
                      "cardano",
                      "near",
                      "solana",
                      "solana-devnet",
                      "stellar",
                      "stellar-testnet",
                      "tezos",
                      "tron",
                      "ton",
                      "ton-testnet",
                    ] as const),
                    address: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    logoURI: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    isPoints: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    coinGeckoId: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                  },
                },
                yieldSource: faker.helpers.arrayElement([
                  "staking",
                  "restaking",
                  "protocol_incentive",
                  "points",
                  "lending_interest",
                  "mev",
                  "real_world_asset_yield",
                ] as const),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              })),
            },
          },
          statistics: faker.helpers.arrayElement([
            {
              ...{
                tvlUsd: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
                tvl: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
                uniqueUsers: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    null,
                  ]),
                  undefined,
                ]),
                averagePositionSizeUsd: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
                averagePositionSize: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          status: {
            ...{
              enter: faker.datatype.boolean(),
              exit: faker.datatype.boolean(),
            },
          },
          metadata: {
            ...{
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              logoURI: faker.string.alpha({ length: { min: 10, max: 20 } }),
              description: faker.string.alpha({ length: { min: 10, max: 20 } }),
              documentation: faker.string.alpha({
                length: { min: 10, max: 20 },
              }),
              underMaintenance: faker.datatype.boolean(),
              deprecated: faker.datatype.boolean(),
              supportedStandards: faker.helpers.arrayElements(
                Object.values(ERCStandards),
              ),
            },
          },
          mechanics: {
            ...{
              type: faker.helpers.arrayElement(Object.values(YieldType)),
              requiresValidatorSelection: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              rewardSchedule: faker.helpers.arrayElement(
                Object.values(RewardSchedule),
              ),
              rewardClaiming: faker.helpers.arrayElement(
                Object.values(RewardClaiming),
              ),
              gasFeeToken: {
                ...{
                  symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  decimals: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  network: faker.helpers.arrayElement([
                    "ethereum",
                    "ethereum-goerli",
                    "ethereum-holesky",
                    "ethereum-sepolia",
                    "ethereum-hoodi",
                    "arbitrum",
                    "base",
                    "base-sepolia",
                    "gnosis",
                    "optimism",
                    "polygon",
                    "polygon-amoy",
                    "starknet",
                    "zksync",
                    "linea",
                    "unichain",
                    "avalanche-c",
                    "avalanche-c-atomic",
                    "avalanche-p",
                    "binance",
                    "celo",
                    "fantom",
                    "harmony",
                    "moonriver",
                    "okc",
                    "viction",
                    "core",
                    "sonic",
                    "katana",
                    "agoric",
                    "akash",
                    "axelar",
                    "band-protocol",
                    "bitsong",
                    "canto",
                    "chihuahua",
                    "comdex",
                    "coreum",
                    "cosmos",
                    "crescent",
                    "cronos",
                    "cudos",
                    "desmos",
                    "dydx",
                    "evmos",
                    "fetch-ai",
                    "gravity-bridge",
                    "injective",
                    "irisnet",
                    "juno",
                    "kava",
                    "ki-network",
                    "mars-protocol",
                    "nym",
                    "okex-chain",
                    "onomy",
                    "osmosis",
                    "persistence",
                    "quicksilver",
                    "regen",
                    "secret",
                    "sentinel",
                    "sommelier",
                    "stafi",
                    "stargaze",
                    "stride",
                    "teritori",
                    "tgrade",
                    "umee",
                    "sei",
                    "mantra",
                    "celestia",
                    "saga",
                    "zetachain",
                    "dymension",
                    "humansai",
                    "neutron",
                    "polkadot",
                    "kusama",
                    "westend",
                    "bittensor",
                    "binancebeacon",
                    "cardano",
                    "near",
                    "solana",
                    "solana-devnet",
                    "stellar",
                    "stellar-testnet",
                    "tezos",
                    "tron",
                    "ton",
                    "ton-testnet",
                  ] as const),
                  address: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  logoURI: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  isPoints: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                  coinGeckoId: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
              },
              lockupPeriod: faker.helpers.arrayElement([
                {
                  ...{
                    seconds: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                  },
                },
                undefined,
              ]),
              cooldownPeriod: faker.helpers.arrayElement([
                {
                  ...{
                    seconds: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                  },
                },
                undefined,
              ]),
              warmupPeriod: faker.helpers.arrayElement([
                {
                  ...{
                    seconds: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                  },
                },
                undefined,
              ]),
              fee: faker.helpers.arrayElement([
                {
                  ...{
                    deposit: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    withdrawal: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    management: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    performance: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                  },
                },
                undefined,
              ]),
              entryLimits: faker.helpers.arrayElement([
                {
                  ...{
                    minimum: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                    maximum: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                  },
                },
                undefined,
              ]),
              supportsLedgerWalletApi: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              extraTransactionFormatsSupported: faker.helpers.arrayElement([
                faker.helpers.arrayElements(["raw", "default"] as const),
                undefined,
              ]),
              arguments: faker.helpers.arrayElement([
                {
                  ...{
                    enter: faker.helpers.arrayElement([
                      {
                        fields: Array.from(
                          { length: faker.number.int({ min: 1, max: 10 }) },
                          (_, i) => i + 1,
                        ).map(() => ({
                          name: faker.helpers.arrayElement([
                            "amount",
                            "validatorAddress",
                            "validatorAddresses",
                            "providerId",
                            "duration",
                            "inputToken",
                            "subnetId",
                            "tronResource",
                            "feeConfigurationId",
                            "cosmosPubKey",
                            "tezosPubKey",
                            "cAddressBech",
                            "pAddressBech",
                            "executionMode",
                            "ledgerWalletApiCompatible",
                          ] as const),
                          type: faker.helpers.arrayElement([
                            "string",
                            "number",
                            "address",
                            "enum",
                            "boolean",
                          ] as const),
                          label: faker.string.alpha({
                            length: { min: 10, max: 20 },
                          }),
                          description: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          required: faker.helpers.arrayElement([
                            faker.datatype.boolean(),
                            undefined,
                          ]),
                          options: faker.helpers.arrayElement([
                            Array.from(
                              { length: faker.number.int({ min: 1, max: 10 }) },
                              (_, i) => i + 1,
                            ).map(() =>
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                            ),
                            undefined,
                          ]),
                          optionsRef: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          default: faker.helpers.arrayElement([{}, undefined]),
                          placeholder: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          minimum: faker.helpers.arrayElement([
                            faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              null,
                            ]),
                            undefined,
                          ]),
                          maximum: faker.helpers.arrayElement([
                            faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              null,
                            ]),
                            undefined,
                          ]),
                          isArray: faker.helpers.arrayElement([
                            faker.datatype.boolean(),
                            undefined,
                          ]),
                        })),
                        notes: faker.helpers.arrayElement([
                          faker.string.alpha({ length: { min: 10, max: 20 } }),
                          undefined,
                        ]),
                      },
                      undefined,
                    ]),
                    exit: faker.helpers.arrayElement([
                      {
                        fields: Array.from(
                          { length: faker.number.int({ min: 1, max: 10 }) },
                          (_, i) => i + 1,
                        ).map(() => ({
                          name: faker.helpers.arrayElement([
                            "amount",
                            "validatorAddress",
                            "validatorAddresses",
                            "providerId",
                            "duration",
                            "inputToken",
                            "subnetId",
                            "tronResource",
                            "feeConfigurationId",
                            "cosmosPubKey",
                            "tezosPubKey",
                            "cAddressBech",
                            "pAddressBech",
                            "executionMode",
                            "ledgerWalletApiCompatible",
                          ] as const),
                          type: faker.helpers.arrayElement([
                            "string",
                            "number",
                            "address",
                            "enum",
                            "boolean",
                          ] as const),
                          label: faker.string.alpha({
                            length: { min: 10, max: 20 },
                          }),
                          description: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          required: faker.helpers.arrayElement([
                            faker.datatype.boolean(),
                            undefined,
                          ]),
                          options: faker.helpers.arrayElement([
                            Array.from(
                              { length: faker.number.int({ min: 1, max: 10 }) },
                              (_, i) => i + 1,
                            ).map(() =>
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                            ),
                            undefined,
                          ]),
                          optionsRef: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          default: faker.helpers.arrayElement([{}, undefined]),
                          placeholder: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                          minimum: faker.helpers.arrayElement([
                            faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              null,
                            ]),
                            undefined,
                          ]),
                          maximum: faker.helpers.arrayElement([
                            faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              null,
                            ]),
                            undefined,
                          ]),
                          isArray: faker.helpers.arrayElement([
                            faker.datatype.boolean(),
                            undefined,
                          ]),
                        })),
                        notes: faker.helpers.arrayElement([
                          faker.string.alpha({ length: { min: 10, max: 20 } }),
                          undefined,
                        ]),
                      },
                      undefined,
                    ]),
                    manage: faker.helpers.arrayElement([
                      {
                        [faker.string.alphanumeric(5)]: {
                          fields: Array.from(
                            { length: faker.number.int({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => ({
                            name: faker.helpers.arrayElement([
                              "amount",
                              "validatorAddress",
                              "validatorAddresses",
                              "providerId",
                              "duration",
                              "inputToken",
                              "subnetId",
                              "tronResource",
                              "feeConfigurationId",
                              "cosmosPubKey",
                              "tezosPubKey",
                              "cAddressBech",
                              "pAddressBech",
                              "executionMode",
                              "ledgerWalletApiCompatible",
                            ] as const),
                            type: faker.helpers.arrayElement([
                              "string",
                              "number",
                              "address",
                              "enum",
                              "boolean",
                            ] as const),
                            label: faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            description: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            required: faker.helpers.arrayElement([
                              faker.datatype.boolean(),
                              undefined,
                            ]),
                            options: faker.helpers.arrayElement([
                              Array.from(
                                {
                                  length: faker.number.int({ min: 1, max: 10 }),
                                },
                                (_, i) => i + 1,
                              ).map(() =>
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                              ),
                              undefined,
                            ]),
                            optionsRef: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            default: faker.helpers.arrayElement([
                              {},
                              undefined,
                            ]),
                            placeholder: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            minimum: faker.helpers.arrayElement([
                              faker.helpers.arrayElement([
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                                null,
                              ]),
                              undefined,
                            ]),
                            maximum: faker.helpers.arrayElement([
                              faker.helpers.arrayElement([
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                                null,
                              ]),
                              undefined,
                            ]),
                            isArray: faker.helpers.arrayElement([
                              faker.datatype.boolean(),
                              undefined,
                            ]),
                          })),
                          notes: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                        },
                      },
                      undefined,
                    ]),
                    balance: faker.helpers.arrayElement([
                      {
                        ...{
                          fields: Array.from(
                            { length: faker.number.int({ min: 1, max: 10 }) },
                            (_, i) => i + 1,
                          ).map(() => ({
                            name: faker.helpers.arrayElement([
                              "amount",
                              "validatorAddress",
                              "validatorAddresses",
                              "providerId",
                              "duration",
                              "inputToken",
                              "subnetId",
                              "tronResource",
                              "feeConfigurationId",
                              "cosmosPubKey",
                              "tezosPubKey",
                              "cAddressBech",
                              "pAddressBech",
                              "executionMode",
                              "ledgerWalletApiCompatible",
                            ] as const),
                            type: faker.helpers.arrayElement([
                              "string",
                              "number",
                              "address",
                              "enum",
                              "boolean",
                            ] as const),
                            label: faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            description: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            required: faker.helpers.arrayElement([
                              faker.datatype.boolean(),
                              undefined,
                            ]),
                            options: faker.helpers.arrayElement([
                              Array.from(
                                {
                                  length: faker.number.int({ min: 1, max: 10 }),
                                },
                                (_, i) => i + 1,
                              ).map(() =>
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                              ),
                              undefined,
                            ]),
                            optionsRef: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            default: faker.helpers.arrayElement([
                              {},
                              undefined,
                            ]),
                            placeholder: faker.helpers.arrayElement([
                              faker.string.alpha({
                                length: { min: 10, max: 20 },
                              }),
                              undefined,
                            ]),
                            minimum: faker.helpers.arrayElement([
                              faker.helpers.arrayElement([
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                                null,
                              ]),
                              undefined,
                            ]),
                            maximum: faker.helpers.arrayElement([
                              faker.helpers.arrayElement([
                                faker.string.alpha({
                                  length: { min: 10, max: 20 },
                                }),
                                null,
                              ]),
                              undefined,
                            ]),
                            isArray: faker.helpers.arrayElement([
                              faker.datatype.boolean(),
                              undefined,
                            ]),
                          })),
                          notes: faker.helpers.arrayElement([
                            faker.string.alpha({
                              length: { min: 10, max: 20 },
                            }),
                            undefined,
                          ]),
                        },
                      },
                      undefined,
                    ]),
                  },
                },
                undefined,
              ]),
              possibleFeeTakingMechanisms: faker.helpers.arrayElement([
                {
                  ...{
                    depositFee: faker.datatype.boolean(),
                    managementFee: faker.datatype.boolean(),
                    performanceFee: faker.datatype.boolean(),
                    validatorRebates: faker.datatype.boolean(),
                  },
                },
                undefined,
              ]),
            },
          },
          providerId: faker.string.alpha({ length: { min: 10, max: 20 } }),
          tags: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
        })),
        undefined,
      ]),
    },
  });

export const getYieldsControllerGetAggregateBalancesResponseMock = (
  overrideResponse: Partial<BalancesResponseDto> = {},
): BalancesResponseDto => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    balances: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      address: faker.string.alpha({ length: { min: 10, max: 20 } }),
      type: faker.helpers.arrayElement(Object.values(BalanceType)),
      amount: faker.string.alpha({ length: { min: 10, max: 20 } }),
      amountRaw: faker.string.alpha({ length: { min: 10, max: 20 } }),
      date: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      feeConfigurationId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      pendingActions: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        intent: faker.helpers.arrayElement([
          "enter",
          "manage",
          "exit",
        ] as const),
        type: faker.helpers.arrayElement([
          "STAKE",
          "UNSTAKE",
          "CLAIM_REWARDS",
          "RESTAKE_REWARDS",
          "WITHDRAW",
          "WITHDRAW_ALL",
          "RESTAKE",
          "CLAIM_UNSTAKED",
          "UNLOCK_LOCKED",
          "STAKE_LOCKED",
          "VOTE",
          "REVOKE",
          "VOTE_LOCKED",
          "REVOTE",
          "REBOND",
          "MIGRATE",
          "VERIFY_WITHDRAW_CREDENTIALS",
          "DELEGATE",
        ] as const),
        passthrough: faker.string.alpha({ length: { min: 10, max: 20 } }),
        arguments: faker.helpers.arrayElement([
          {
            ...{
              fields: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                name: faker.helpers.arrayElement([
                  "amount",
                  "validatorAddress",
                  "validatorAddresses",
                  "providerId",
                  "duration",
                  "inputToken",
                  "subnetId",
                  "tronResource",
                  "feeConfigurationId",
                  "cosmosPubKey",
                  "tezosPubKey",
                  "cAddressBech",
                  "pAddressBech",
                  "executionMode",
                  "ledgerWalletApiCompatible",
                ] as const),
                type: faker.helpers.arrayElement([
                  "string",
                  "number",
                  "address",
                  "enum",
                  "boolean",
                ] as const),
                label: faker.string.alpha({ length: { min: 10, max: 20 } }),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                required: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
                options: faker.helpers.arrayElement([
                  Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() =>
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                  ),
                  undefined,
                ]),
                optionsRef: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                default: faker.helpers.arrayElement([{}, undefined]),
                placeholder: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
                minimum: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
                maximum: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    null,
                  ]),
                  undefined,
                ]),
                isArray: faker.helpers.arrayElement([
                  faker.datatype.boolean(),
                  undefined,
                ]),
              })),
              notes: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
          },
          undefined,
        ]),
      })),
      token: {
        ...{
          symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          decimals: faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          network: faker.helpers.arrayElement([
            "ethereum",
            "ethereum-goerli",
            "ethereum-holesky",
            "ethereum-sepolia",
            "ethereum-hoodi",
            "arbitrum",
            "base",
            "base-sepolia",
            "gnosis",
            "optimism",
            "polygon",
            "polygon-amoy",
            "starknet",
            "zksync",
            "linea",
            "unichain",
            "avalanche-c",
            "avalanche-c-atomic",
            "avalanche-p",
            "binance",
            "celo",
            "fantom",
            "harmony",
            "moonriver",
            "okc",
            "viction",
            "core",
            "sonic",
            "katana",
            "agoric",
            "akash",
            "axelar",
            "band-protocol",
            "bitsong",
            "canto",
            "chihuahua",
            "comdex",
            "coreum",
            "cosmos",
            "crescent",
            "cronos",
            "cudos",
            "desmos",
            "dydx",
            "evmos",
            "fetch-ai",
            "gravity-bridge",
            "injective",
            "irisnet",
            "juno",
            "kava",
            "ki-network",
            "mars-protocol",
            "nym",
            "okex-chain",
            "onomy",
            "osmosis",
            "persistence",
            "quicksilver",
            "regen",
            "secret",
            "sentinel",
            "sommelier",
            "stafi",
            "stargaze",
            "stride",
            "teritori",
            "tgrade",
            "umee",
            "sei",
            "mantra",
            "celestia",
            "saga",
            "zetachain",
            "dymension",
            "humansai",
            "neutron",
            "polkadot",
            "kusama",
            "westend",
            "bittensor",
            "binancebeacon",
            "cardano",
            "near",
            "solana",
            "solana-devnet",
            "stellar",
            "stellar-testnet",
            "tezos",
            "tron",
            "ton",
            "ton-testnet",
          ] as const),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          isPoints: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          coinGeckoId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
      },
      validator: faker.helpers.arrayElement([
        {
          ...{
            address: faker.string.alpha({ length: { min: 10, max: 20 } }),
            name: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            logoURI: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            website: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            rewardRate: faker.helpers.arrayElement([
              {
                ...{
                  total: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  rateType: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  components: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => ({
                    rate: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    rateType: faker.string.alpha({
                      length: { min: 10, max: 20 },
                    }),
                    token: {
                      ...{
                        symbol: faker.string.alpha({
                          length: { min: 10, max: 20 },
                        }),
                        name: faker.string.alpha({
                          length: { min: 10, max: 20 },
                        }),
                        decimals: faker.number.float({
                          min: undefined,
                          max: undefined,
                          fractionDigits: 2,
                        }),
                        network: faker.helpers.arrayElement([
                          "ethereum",
                          "ethereum-goerli",
                          "ethereum-holesky",
                          "ethereum-sepolia",
                          "ethereum-hoodi",
                          "arbitrum",
                          "base",
                          "base-sepolia",
                          "gnosis",
                          "optimism",
                          "polygon",
                          "polygon-amoy",
                          "starknet",
                          "zksync",
                          "linea",
                          "unichain",
                          "avalanche-c",
                          "avalanche-c-atomic",
                          "avalanche-p",
                          "binance",
                          "celo",
                          "fantom",
                          "harmony",
                          "moonriver",
                          "okc",
                          "viction",
                          "core",
                          "sonic",
                          "katana",
                          "agoric",
                          "akash",
                          "axelar",
                          "band-protocol",
                          "bitsong",
                          "canto",
                          "chihuahua",
                          "comdex",
                          "coreum",
                          "cosmos",
                          "crescent",
                          "cronos",
                          "cudos",
                          "desmos",
                          "dydx",
                          "evmos",
                          "fetch-ai",
                          "gravity-bridge",
                          "injective",
                          "irisnet",
                          "juno",
                          "kava",
                          "ki-network",
                          "mars-protocol",
                          "nym",
                          "okex-chain",
                          "onomy",
                          "osmosis",
                          "persistence",
                          "quicksilver",
                          "regen",
                          "secret",
                          "sentinel",
                          "sommelier",
                          "stafi",
                          "stargaze",
                          "stride",
                          "teritori",
                          "tgrade",
                          "umee",
                          "sei",
                          "mantra",
                          "celestia",
                          "saga",
                          "zetachain",
                          "dymension",
                          "humansai",
                          "neutron",
                          "polkadot",
                          "kusama",
                          "westend",
                          "bittensor",
                          "binancebeacon",
                          "cardano",
                          "near",
                          "solana",
                          "solana-devnet",
                          "stellar",
                          "stellar-testnet",
                          "tezos",
                          "tron",
                          "ton",
                          "ton-testnet",
                        ] as const),
                        address: faker.helpers.arrayElement([
                          faker.string.alpha({ length: { min: 10, max: 20 } }),
                          undefined,
                        ]),
                        logoURI: faker.helpers.arrayElement([
                          faker.string.alpha({ length: { min: 10, max: 20 } }),
                          undefined,
                        ]),
                        isPoints: faker.helpers.arrayElement([
                          faker.datatype.boolean(),
                          undefined,
                        ]),
                        coinGeckoId: faker.helpers.arrayElement([
                          faker.string.alpha({ length: { min: 10, max: 20 } }),
                          undefined,
                        ]),
                      },
                    },
                    yieldSource: faker.helpers.arrayElement([
                      "staking",
                      "restaking",
                      "protocol_incentive",
                      "points",
                      "lending_interest",
                      "mev",
                      "real_world_asset_yield",
                    ] as const),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                  })),
                },
              },
              undefined,
            ]),
            provider: faker.helpers.arrayElement([
              {
                ...{
                  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  uniqueId: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  website: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  rank: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  preferred: faker.datatype.boolean(),
                  revshare: faker.helpers.arrayElement([
                    {
                      ...{
                        trial: faker.helpers.arrayElement([
                          {
                            ...{
                              minRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                              maxRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                            },
                          },
                          undefined,
                        ]),
                        standard: faker.helpers.arrayElement([
                          {
                            ...{
                              minRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                              maxRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                            },
                          },
                          undefined,
                        ]),
                        pro: faker.helpers.arrayElement([
                          {
                            ...{
                              minRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                              maxRevShare: faker.number.float({
                                min: undefined,
                                max: undefined,
                                fractionDigits: 2,
                              }),
                            },
                          },
                          undefined,
                        ]),
                      },
                    },
                    undefined,
                  ]),
                },
              },
              undefined,
            ]),
            commission: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            tvlUsd: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            tvl: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            votingPower: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            preferred: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            minimumStake: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            remainingPossibleStake: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            remainingSlots: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            nominatorCount: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            status: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            providerId: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            pricePerShare: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            subnetId: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            subnetName: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            marketCap: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            tokenSymbol: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      validators: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          website: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          rewardRate: faker.helpers.arrayElement([
            {
              ...{
                total: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                components: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  rate: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  rateType: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  token: {
                    ...{
                      symbol: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      name: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      decimals: faker.number.float({
                        min: undefined,
                        max: undefined,
                        fractionDigits: 2,
                      }),
                      network: faker.helpers.arrayElement([
                        "ethereum",
                        "ethereum-goerli",
                        "ethereum-holesky",
                        "ethereum-sepolia",
                        "ethereum-hoodi",
                        "arbitrum",
                        "base",
                        "base-sepolia",
                        "gnosis",
                        "optimism",
                        "polygon",
                        "polygon-amoy",
                        "starknet",
                        "zksync",
                        "linea",
                        "unichain",
                        "avalanche-c",
                        "avalanche-c-atomic",
                        "avalanche-p",
                        "binance",
                        "celo",
                        "fantom",
                        "harmony",
                        "moonriver",
                        "okc",
                        "viction",
                        "core",
                        "sonic",
                        "katana",
                        "agoric",
                        "akash",
                        "axelar",
                        "band-protocol",
                        "bitsong",
                        "canto",
                        "chihuahua",
                        "comdex",
                        "coreum",
                        "cosmos",
                        "crescent",
                        "cronos",
                        "cudos",
                        "desmos",
                        "dydx",
                        "evmos",
                        "fetch-ai",
                        "gravity-bridge",
                        "injective",
                        "irisnet",
                        "juno",
                        "kava",
                        "ki-network",
                        "mars-protocol",
                        "nym",
                        "okex-chain",
                        "onomy",
                        "osmosis",
                        "persistence",
                        "quicksilver",
                        "regen",
                        "secret",
                        "sentinel",
                        "sommelier",
                        "stafi",
                        "stargaze",
                        "stride",
                        "teritori",
                        "tgrade",
                        "umee",
                        "sei",
                        "mantra",
                        "celestia",
                        "saga",
                        "zetachain",
                        "dymension",
                        "humansai",
                        "neutron",
                        "polkadot",
                        "kusama",
                        "westend",
                        "bittensor",
                        "binancebeacon",
                        "cardano",
                        "near",
                        "solana",
                        "solana-devnet",
                        "stellar",
                        "stellar-testnet",
                        "tezos",
                        "tron",
                        "ton",
                        "ton-testnet",
                      ] as const),
                      address: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      logoURI: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      isPoints: faker.helpers.arrayElement([
                        faker.datatype.boolean(),
                        undefined,
                      ]),
                      coinGeckoId: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                    },
                  },
                  yieldSource: faker.helpers.arrayElement([
                    "staking",
                    "restaking",
                    "protocol_incentive",
                    "points",
                    "lending_interest",
                    "mev",
                    "real_world_asset_yield",
                  ] as const),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                })),
              },
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            {
              ...{
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
                website: faker.string.alpha({ length: { min: 10, max: 20 } }),
                rank: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                preferred: faker.datatype.boolean(),
                revshare: faker.helpers.arrayElement([
                  {
                    ...{
                      trial: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      standard: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      pro: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                    },
                  },
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          commission: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          tvlUsd: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tvl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          votingPower: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          preferred: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minimumStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingPossibleStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingSlots: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          nominatorCount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          status: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          providerId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          pricePerShare: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          subnetId: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          subnetName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          marketCap: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tokenSymbol: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })),
        undefined,
      ]),
      amountUsd: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      isEarning: faker.datatype.boolean(),
    })),
  })),
  errors: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    error: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
});

export const getYieldsControllerGetYieldResponseMock = (
  overrideResponse: Partial<YieldDto> = {},
): YieldDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  network: faker.helpers.arrayElement([
    "ethereum",
    "ethereum-goerli",
    "ethereum-holesky",
    "ethereum-sepolia",
    "ethereum-hoodi",
    "arbitrum",
    "base",
    "base-sepolia",
    "gnosis",
    "optimism",
    "polygon",
    "polygon-amoy",
    "starknet",
    "zksync",
    "linea",
    "unichain",
    "avalanche-c",
    "avalanche-c-atomic",
    "avalanche-p",
    "binance",
    "celo",
    "fantom",
    "harmony",
    "moonriver",
    "okc",
    "viction",
    "core",
    "sonic",
    "katana",
    "agoric",
    "akash",
    "axelar",
    "band-protocol",
    "bitsong",
    "canto",
    "chihuahua",
    "comdex",
    "coreum",
    "cosmos",
    "crescent",
    "cronos",
    "cudos",
    "desmos",
    "dydx",
    "evmos",
    "fetch-ai",
    "gravity-bridge",
    "injective",
    "irisnet",
    "juno",
    "kava",
    "ki-network",
    "mars-protocol",
    "nym",
    "okex-chain",
    "onomy",
    "osmosis",
    "persistence",
    "quicksilver",
    "regen",
    "secret",
    "sentinel",
    "sommelier",
    "stafi",
    "stargaze",
    "stride",
    "teritori",
    "tgrade",
    "umee",
    "sei",
    "mantra",
    "celestia",
    "saga",
    "zetachain",
    "dymension",
    "humansai",
    "neutron",
    "polkadot",
    "kusama",
    "westend",
    "bittensor",
    "binancebeacon",
    "cardano",
    "near",
    "solana",
    "solana-devnet",
    "stellar",
    "stellar-testnet",
    "tezos",
    "tron",
    "ton",
    "ton-testnet",
  ] as const),
  inputTokens: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    decimals: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    network: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    address: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    logoURI: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    isPoints: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    coinGeckoId: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  })),
  outputToken: faker.helpers.arrayElement([
    {
      ...{
        symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        decimals: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        network: faker.helpers.arrayElement([
          "ethereum",
          "ethereum-goerli",
          "ethereum-holesky",
          "ethereum-sepolia",
          "ethereum-hoodi",
          "arbitrum",
          "base",
          "base-sepolia",
          "gnosis",
          "optimism",
          "polygon",
          "polygon-amoy",
          "starknet",
          "zksync",
          "linea",
          "unichain",
          "avalanche-c",
          "avalanche-c-atomic",
          "avalanche-p",
          "binance",
          "celo",
          "fantom",
          "harmony",
          "moonriver",
          "okc",
          "viction",
          "core",
          "sonic",
          "katana",
          "agoric",
          "akash",
          "axelar",
          "band-protocol",
          "bitsong",
          "canto",
          "chihuahua",
          "comdex",
          "coreum",
          "cosmos",
          "crescent",
          "cronos",
          "cudos",
          "desmos",
          "dydx",
          "evmos",
          "fetch-ai",
          "gravity-bridge",
          "injective",
          "irisnet",
          "juno",
          "kava",
          "ki-network",
          "mars-protocol",
          "nym",
          "okex-chain",
          "onomy",
          "osmosis",
          "persistence",
          "quicksilver",
          "regen",
          "secret",
          "sentinel",
          "sommelier",
          "stafi",
          "stargaze",
          "stride",
          "teritori",
          "tgrade",
          "umee",
          "sei",
          "mantra",
          "celestia",
          "saga",
          "zetachain",
          "dymension",
          "humansai",
          "neutron",
          "polkadot",
          "kusama",
          "westend",
          "bittensor",
          "binancebeacon",
          "cardano",
          "near",
          "solana",
          "solana-devnet",
          "stellar",
          "stellar-testnet",
          "tezos",
          "tron",
          "ton",
          "ton-testnet",
        ] as const),
        address: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        logoURI: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        isPoints: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        coinGeckoId: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      },
    },
    undefined,
  ]),
  token: {
    ...{
      symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      decimals: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      network: faker.helpers.arrayElement([
        "ethereum",
        "ethereum-goerli",
        "ethereum-holesky",
        "ethereum-sepolia",
        "ethereum-hoodi",
        "arbitrum",
        "base",
        "base-sepolia",
        "gnosis",
        "optimism",
        "polygon",
        "polygon-amoy",
        "starknet",
        "zksync",
        "linea",
        "unichain",
        "avalanche-c",
        "avalanche-c-atomic",
        "avalanche-p",
        "binance",
        "celo",
        "fantom",
        "harmony",
        "moonriver",
        "okc",
        "viction",
        "core",
        "sonic",
        "katana",
        "agoric",
        "akash",
        "axelar",
        "band-protocol",
        "bitsong",
        "canto",
        "chihuahua",
        "comdex",
        "coreum",
        "cosmos",
        "crescent",
        "cronos",
        "cudos",
        "desmos",
        "dydx",
        "evmos",
        "fetch-ai",
        "gravity-bridge",
        "injective",
        "irisnet",
        "juno",
        "kava",
        "ki-network",
        "mars-protocol",
        "nym",
        "okex-chain",
        "onomy",
        "osmosis",
        "persistence",
        "quicksilver",
        "regen",
        "secret",
        "sentinel",
        "sommelier",
        "stafi",
        "stargaze",
        "stride",
        "teritori",
        "tgrade",
        "umee",
        "sei",
        "mantra",
        "celestia",
        "saga",
        "zetachain",
        "dymension",
        "humansai",
        "neutron",
        "polkadot",
        "kusama",
        "westend",
        "bittensor",
        "binancebeacon",
        "cardano",
        "near",
        "solana",
        "solana-devnet",
        "stellar",
        "stellar-testnet",
        "tezos",
        "tron",
        "ton",
        "ton-testnet",
      ] as const),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      logoURI: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      isPoints: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      coinGeckoId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
  },
  rewardRate: {
    ...{
      total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
      components: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        rate: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
        token: {
          ...{
            symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
            name: faker.string.alpha({ length: { min: 10, max: 20 } }),
            decimals: faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            network: faker.helpers.arrayElement([
              "ethereum",
              "ethereum-goerli",
              "ethereum-holesky",
              "ethereum-sepolia",
              "ethereum-hoodi",
              "arbitrum",
              "base",
              "base-sepolia",
              "gnosis",
              "optimism",
              "polygon",
              "polygon-amoy",
              "starknet",
              "zksync",
              "linea",
              "unichain",
              "avalanche-c",
              "avalanche-c-atomic",
              "avalanche-p",
              "binance",
              "celo",
              "fantom",
              "harmony",
              "moonriver",
              "okc",
              "viction",
              "core",
              "sonic",
              "katana",
              "agoric",
              "akash",
              "axelar",
              "band-protocol",
              "bitsong",
              "canto",
              "chihuahua",
              "comdex",
              "coreum",
              "cosmos",
              "crescent",
              "cronos",
              "cudos",
              "desmos",
              "dydx",
              "evmos",
              "fetch-ai",
              "gravity-bridge",
              "injective",
              "irisnet",
              "juno",
              "kava",
              "ki-network",
              "mars-protocol",
              "nym",
              "okex-chain",
              "onomy",
              "osmosis",
              "persistence",
              "quicksilver",
              "regen",
              "secret",
              "sentinel",
              "sommelier",
              "stafi",
              "stargaze",
              "stride",
              "teritori",
              "tgrade",
              "umee",
              "sei",
              "mantra",
              "celestia",
              "saga",
              "zetachain",
              "dymension",
              "humansai",
              "neutron",
              "polkadot",
              "kusama",
              "westend",
              "bittensor",
              "binancebeacon",
              "cardano",
              "near",
              "solana",
              "solana-devnet",
              "stellar",
              "stellar-testnet",
              "tezos",
              "tron",
              "ton",
              "ton-testnet",
            ] as const),
            address: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            logoURI: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            isPoints: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
            coinGeckoId: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        },
        yieldSource: faker.helpers.arrayElement([
          "staking",
          "restaking",
          "protocol_incentive",
          "points",
          "lending_interest",
          "mev",
          "real_world_asset_yield",
        ] as const),
        description: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      })),
    },
  },
  statistics: faker.helpers.arrayElement([
    {
      ...{
        tvlUsd: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        tvl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        uniqueUsers: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            null,
          ]),
          undefined,
        ]),
        averagePositionSizeUsd: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
        averagePositionSize: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          undefined,
        ]),
      },
    },
    undefined,
  ]),
  status: {
    ...{ enter: faker.datatype.boolean(), exit: faker.datatype.boolean() },
  },
  metadata: {
    ...{
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      logoURI: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      documentation: faker.string.alpha({ length: { min: 10, max: 20 } }),
      underMaintenance: faker.datatype.boolean(),
      deprecated: faker.datatype.boolean(),
      supportedStandards: faker.helpers.arrayElements(
        Object.values(ERCStandards),
      ),
    },
  },
  mechanics: {
    ...{
      type: faker.helpers.arrayElement(Object.values(YieldType)),
      requiresValidatorSelection: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      rewardSchedule: faker.helpers.arrayElement(Object.values(RewardSchedule)),
      rewardClaiming: faker.helpers.arrayElement(Object.values(RewardClaiming)),
      gasFeeToken: {
        ...{
          symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          decimals: faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          network: faker.helpers.arrayElement([
            "ethereum",
            "ethereum-goerli",
            "ethereum-holesky",
            "ethereum-sepolia",
            "ethereum-hoodi",
            "arbitrum",
            "base",
            "base-sepolia",
            "gnosis",
            "optimism",
            "polygon",
            "polygon-amoy",
            "starknet",
            "zksync",
            "linea",
            "unichain",
            "avalanche-c",
            "avalanche-c-atomic",
            "avalanche-p",
            "binance",
            "celo",
            "fantom",
            "harmony",
            "moonriver",
            "okc",
            "viction",
            "core",
            "sonic",
            "katana",
            "agoric",
            "akash",
            "axelar",
            "band-protocol",
            "bitsong",
            "canto",
            "chihuahua",
            "comdex",
            "coreum",
            "cosmos",
            "crescent",
            "cronos",
            "cudos",
            "desmos",
            "dydx",
            "evmos",
            "fetch-ai",
            "gravity-bridge",
            "injective",
            "irisnet",
            "juno",
            "kava",
            "ki-network",
            "mars-protocol",
            "nym",
            "okex-chain",
            "onomy",
            "osmosis",
            "persistence",
            "quicksilver",
            "regen",
            "secret",
            "sentinel",
            "sommelier",
            "stafi",
            "stargaze",
            "stride",
            "teritori",
            "tgrade",
            "umee",
            "sei",
            "mantra",
            "celestia",
            "saga",
            "zetachain",
            "dymension",
            "humansai",
            "neutron",
            "polkadot",
            "kusama",
            "westend",
            "bittensor",
            "binancebeacon",
            "cardano",
            "near",
            "solana",
            "solana-devnet",
            "stellar",
            "stellar-testnet",
            "tezos",
            "tron",
            "ton",
            "ton-testnet",
          ] as const),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          isPoints: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          coinGeckoId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
      },
      lockupPeriod: faker.helpers.arrayElement([
        {
          ...{
            seconds: faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
          },
        },
        undefined,
      ]),
      cooldownPeriod: faker.helpers.arrayElement([
        {
          ...{
            seconds: faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
          },
        },
        undefined,
      ]),
      warmupPeriod: faker.helpers.arrayElement([
        {
          ...{
            seconds: faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
          },
        },
        undefined,
      ]),
      fee: faker.helpers.arrayElement([
        {
          ...{
            deposit: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            withdrawal: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            management: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            performance: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      entryLimits: faker.helpers.arrayElement([
        {
          ...{
            minimum: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            maximum: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
          },
        },
        undefined,
      ]),
      supportsLedgerWalletApi: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      extraTransactionFormatsSupported: faker.helpers.arrayElement([
        faker.helpers.arrayElements(["raw", "default"] as const),
        undefined,
      ]),
      arguments: faker.helpers.arrayElement([
        {
          ...{
            enter: faker.helpers.arrayElement([
              {
                fields: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  name: faker.helpers.arrayElement([
                    "amount",
                    "validatorAddress",
                    "validatorAddresses",
                    "providerId",
                    "duration",
                    "inputToken",
                    "subnetId",
                    "tronResource",
                    "feeConfigurationId",
                    "cosmosPubKey",
                    "tezosPubKey",
                    "cAddressBech",
                    "pAddressBech",
                    "executionMode",
                    "ledgerWalletApiCompatible",
                  ] as const),
                  type: faker.helpers.arrayElement([
                    "string",
                    "number",
                    "address",
                    "enum",
                    "boolean",
                  ] as const),
                  label: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  required: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                  options: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1,
                    ).map(() =>
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                    ),
                    undefined,
                  ]),
                  optionsRef: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  default: faker.helpers.arrayElement([{}, undefined]),
                  placeholder: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  minimum: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                    undefined,
                  ]),
                  maximum: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                    undefined,
                  ]),
                  isArray: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                })),
                notes: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              },
              undefined,
            ]),
            exit: faker.helpers.arrayElement([
              {
                fields: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  name: faker.helpers.arrayElement([
                    "amount",
                    "validatorAddress",
                    "validatorAddresses",
                    "providerId",
                    "duration",
                    "inputToken",
                    "subnetId",
                    "tronResource",
                    "feeConfigurationId",
                    "cosmosPubKey",
                    "tezosPubKey",
                    "cAddressBech",
                    "pAddressBech",
                    "executionMode",
                    "ledgerWalletApiCompatible",
                  ] as const),
                  type: faker.helpers.arrayElement([
                    "string",
                    "number",
                    "address",
                    "enum",
                    "boolean",
                  ] as const),
                  label: faker.string.alpha({ length: { min: 10, max: 20 } }),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  required: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                  options: faker.helpers.arrayElement([
                    Array.from(
                      { length: faker.number.int({ min: 1, max: 10 }) },
                      (_, i) => i + 1,
                    ).map(() =>
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                    ),
                    undefined,
                  ]),
                  optionsRef: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  default: faker.helpers.arrayElement([{}, undefined]),
                  placeholder: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  minimum: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                    undefined,
                  ]),
                  maximum: faker.helpers.arrayElement([
                    faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      null,
                    ]),
                    undefined,
                  ]),
                  isArray: faker.helpers.arrayElement([
                    faker.datatype.boolean(),
                    undefined,
                  ]),
                })),
                notes: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              },
              undefined,
            ]),
            manage: faker.helpers.arrayElement([
              {
                [faker.string.alphanumeric(5)]: {
                  fields: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => ({
                    name: faker.helpers.arrayElement([
                      "amount",
                      "validatorAddress",
                      "validatorAddresses",
                      "providerId",
                      "duration",
                      "inputToken",
                      "subnetId",
                      "tronResource",
                      "feeConfigurationId",
                      "cosmosPubKey",
                      "tezosPubKey",
                      "cAddressBech",
                      "pAddressBech",
                      "executionMode",
                      "ledgerWalletApiCompatible",
                    ] as const),
                    type: faker.helpers.arrayElement([
                      "string",
                      "number",
                      "address",
                      "enum",
                      "boolean",
                    ] as const),
                    label: faker.string.alpha({ length: { min: 10, max: 20 } }),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    required: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    options: faker.helpers.arrayElement([
                      Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1,
                      ).map(() =>
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                      ),
                      undefined,
                    ]),
                    optionsRef: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    default: faker.helpers.arrayElement([{}, undefined]),
                    placeholder: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    minimum: faker.helpers.arrayElement([
                      faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        null,
                      ]),
                      undefined,
                    ]),
                    maximum: faker.helpers.arrayElement([
                      faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        null,
                      ]),
                      undefined,
                    ]),
                    isArray: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                  })),
                  notes: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
              },
              undefined,
            ]),
            balance: faker.helpers.arrayElement([
              {
                ...{
                  fields: Array.from(
                    { length: faker.number.int({ min: 1, max: 10 }) },
                    (_, i) => i + 1,
                  ).map(() => ({
                    name: faker.helpers.arrayElement([
                      "amount",
                      "validatorAddress",
                      "validatorAddresses",
                      "providerId",
                      "duration",
                      "inputToken",
                      "subnetId",
                      "tronResource",
                      "feeConfigurationId",
                      "cosmosPubKey",
                      "tezosPubKey",
                      "cAddressBech",
                      "pAddressBech",
                      "executionMode",
                      "ledgerWalletApiCompatible",
                    ] as const),
                    type: faker.helpers.arrayElement([
                      "string",
                      "number",
                      "address",
                      "enum",
                      "boolean",
                    ] as const),
                    label: faker.string.alpha({ length: { min: 10, max: 20 } }),
                    description: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    required: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    options: faker.helpers.arrayElement([
                      Array.from(
                        { length: faker.number.int({ min: 1, max: 10 }) },
                        (_, i) => i + 1,
                      ).map(() =>
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                      ),
                      undefined,
                    ]),
                    optionsRef: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    default: faker.helpers.arrayElement([{}, undefined]),
                    placeholder: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    minimum: faker.helpers.arrayElement([
                      faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        null,
                      ]),
                      undefined,
                    ]),
                    maximum: faker.helpers.arrayElement([
                      faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        null,
                      ]),
                      undefined,
                    ]),
                    isArray: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                  })),
                  notes: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
              },
              undefined,
            ]),
          },
        },
        undefined,
      ]),
      possibleFeeTakingMechanisms: faker.helpers.arrayElement([
        {
          ...{
            depositFee: faker.datatype.boolean(),
            managementFee: faker.datatype.boolean(),
            performanceFee: faker.datatype.boolean(),
            validatorRebates: faker.datatype.boolean(),
          },
        },
        undefined,
      ]),
    },
  },
  providerId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tags: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getYieldsControllerGetYieldBalancesLegacyResponseMock = (
  overrideResponse: Partial<YieldBalancesDto> = {},
): YieldBalancesDto => ({
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  balances: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(BalanceType)),
    amount: faker.string.alpha({ length: { min: 10, max: 20 } }),
    amountRaw: faker.string.alpha({ length: { min: 10, max: 20 } }),
    date: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    feeConfigurationId: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    pendingActions: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
      type: faker.helpers.arrayElement([
        "STAKE",
        "UNSTAKE",
        "CLAIM_REWARDS",
        "RESTAKE_REWARDS",
        "WITHDRAW",
        "WITHDRAW_ALL",
        "RESTAKE",
        "CLAIM_UNSTAKED",
        "UNLOCK_LOCKED",
        "STAKE_LOCKED",
        "VOTE",
        "REVOKE",
        "VOTE_LOCKED",
        "REVOTE",
        "REBOND",
        "MIGRATE",
        "VERIFY_WITHDRAW_CREDENTIALS",
        "DELEGATE",
      ] as const),
      passthrough: faker.string.alpha({ length: { min: 10, max: 20 } }),
      arguments: faker.helpers.arrayElement([
        {
          ...{
            fields: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                "amount",
                "validatorAddress",
                "validatorAddresses",
                "providerId",
                "duration",
                "inputToken",
                "subnetId",
                "tronResource",
                "feeConfigurationId",
                "cosmosPubKey",
                "tezosPubKey",
                "cAddressBech",
                "pAddressBech",
                "executionMode",
                "ledgerWalletApiCompatible",
              ] as const),
              type: faker.helpers.arrayElement([
                "string",
                "number",
                "address",
                "enum",
                "boolean",
              ] as const),
              label: faker.string.alpha({ length: { min: 10, max: 20 } }),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              required: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              options: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() =>
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                ),
                undefined,
              ]),
              optionsRef: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              default: faker.helpers.arrayElement([{}, undefined]),
              placeholder: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              minimum: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  null,
                ]),
                undefined,
              ]),
              maximum: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  null,
                ]),
                undefined,
              ]),
              isArray: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            notes: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
    })),
    token: {
      ...{
        symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        decimals: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        network: faker.helpers.arrayElement([
          "ethereum",
          "ethereum-goerli",
          "ethereum-holesky",
          "ethereum-sepolia",
          "ethereum-hoodi",
          "arbitrum",
          "base",
          "base-sepolia",
          "gnosis",
          "optimism",
          "polygon",
          "polygon-amoy",
          "starknet",
          "zksync",
          "linea",
          "unichain",
          "avalanche-c",
          "avalanche-c-atomic",
          "avalanche-p",
          "binance",
          "celo",
          "fantom",
          "harmony",
          "moonriver",
          "okc",
          "viction",
          "core",
          "sonic",
          "katana",
          "agoric",
          "akash",
          "axelar",
          "band-protocol",
          "bitsong",
          "canto",
          "chihuahua",
          "comdex",
          "coreum",
          "cosmos",
          "crescent",
          "cronos",
          "cudos",
          "desmos",
          "dydx",
          "evmos",
          "fetch-ai",
          "gravity-bridge",
          "injective",
          "irisnet",
          "juno",
          "kava",
          "ki-network",
          "mars-protocol",
          "nym",
          "okex-chain",
          "onomy",
          "osmosis",
          "persistence",
          "quicksilver",
          "regen",
          "secret",
          "sentinel",
          "sommelier",
          "stafi",
          "stargaze",
          "stride",
          "teritori",
          "tgrade",
          "umee",
          "sei",
          "mantra",
          "celestia",
          "saga",
          "zetachain",
          "dymension",
          "humansai",
          "neutron",
          "polkadot",
          "kusama",
          "westend",
          "bittensor",
          "binancebeacon",
          "cardano",
          "near",
          "solana",
          "solana-devnet",
          "stellar",
          "stellar-testnet",
          "tezos",
          "tron",
          "ton",
          "ton-testnet",
        ] as const),
        address: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        logoURI: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        isPoints: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        coinGeckoId: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      },
    },
    validator: faker.helpers.arrayElement([
      {
        ...{
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          website: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          rewardRate: faker.helpers.arrayElement([
            {
              ...{
                total: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                components: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  rate: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  rateType: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  token: {
                    ...{
                      symbol: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      name: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      decimals: faker.number.float({
                        min: undefined,
                        max: undefined,
                        fractionDigits: 2,
                      }),
                      network: faker.helpers.arrayElement([
                        "ethereum",
                        "ethereum-goerli",
                        "ethereum-holesky",
                        "ethereum-sepolia",
                        "ethereum-hoodi",
                        "arbitrum",
                        "base",
                        "base-sepolia",
                        "gnosis",
                        "optimism",
                        "polygon",
                        "polygon-amoy",
                        "starknet",
                        "zksync",
                        "linea",
                        "unichain",
                        "avalanche-c",
                        "avalanche-c-atomic",
                        "avalanche-p",
                        "binance",
                        "celo",
                        "fantom",
                        "harmony",
                        "moonriver",
                        "okc",
                        "viction",
                        "core",
                        "sonic",
                        "katana",
                        "agoric",
                        "akash",
                        "axelar",
                        "band-protocol",
                        "bitsong",
                        "canto",
                        "chihuahua",
                        "comdex",
                        "coreum",
                        "cosmos",
                        "crescent",
                        "cronos",
                        "cudos",
                        "desmos",
                        "dydx",
                        "evmos",
                        "fetch-ai",
                        "gravity-bridge",
                        "injective",
                        "irisnet",
                        "juno",
                        "kava",
                        "ki-network",
                        "mars-protocol",
                        "nym",
                        "okex-chain",
                        "onomy",
                        "osmosis",
                        "persistence",
                        "quicksilver",
                        "regen",
                        "secret",
                        "sentinel",
                        "sommelier",
                        "stafi",
                        "stargaze",
                        "stride",
                        "teritori",
                        "tgrade",
                        "umee",
                        "sei",
                        "mantra",
                        "celestia",
                        "saga",
                        "zetachain",
                        "dymension",
                        "humansai",
                        "neutron",
                        "polkadot",
                        "kusama",
                        "westend",
                        "bittensor",
                        "binancebeacon",
                        "cardano",
                        "near",
                        "solana",
                        "solana-devnet",
                        "stellar",
                        "stellar-testnet",
                        "tezos",
                        "tron",
                        "ton",
                        "ton-testnet",
                      ] as const),
                      address: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      logoURI: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      isPoints: faker.helpers.arrayElement([
                        faker.datatype.boolean(),
                        undefined,
                      ]),
                      coinGeckoId: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                    },
                  },
                  yieldSource: faker.helpers.arrayElement([
                    "staking",
                    "restaking",
                    "protocol_incentive",
                    "points",
                    "lending_interest",
                    "mev",
                    "real_world_asset_yield",
                  ] as const),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                })),
              },
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            {
              ...{
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
                website: faker.string.alpha({ length: { min: 10, max: 20 } }),
                rank: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                preferred: faker.datatype.boolean(),
                revshare: faker.helpers.arrayElement([
                  {
                    ...{
                      trial: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      standard: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      pro: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                    },
                  },
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          commission: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          tvlUsd: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tvl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          votingPower: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          preferred: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minimumStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingPossibleStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingSlots: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          nominatorCount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          status: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          providerId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          pricePerShare: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          subnetId: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          subnetName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          marketCap: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tokenSymbol: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
      },
      undefined,
    ]),
    validators: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        logoURI: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        website: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        rewardRate: faker.helpers.arrayElement([
          {
            ...{
              total: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
              components: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                rate: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                token: {
                  ...{
                    symbol: faker.string.alpha({
                      length: { min: 10, max: 20 },
                    }),
                    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                    decimals: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    network: faker.helpers.arrayElement([
                      "ethereum",
                      "ethereum-goerli",
                      "ethereum-holesky",
                      "ethereum-sepolia",
                      "ethereum-hoodi",
                      "arbitrum",
                      "base",
                      "base-sepolia",
                      "gnosis",
                      "optimism",
                      "polygon",
                      "polygon-amoy",
                      "starknet",
                      "zksync",
                      "linea",
                      "unichain",
                      "avalanche-c",
                      "avalanche-c-atomic",
                      "avalanche-p",
                      "binance",
                      "celo",
                      "fantom",
                      "harmony",
                      "moonriver",
                      "okc",
                      "viction",
                      "core",
                      "sonic",
                      "katana",
                      "agoric",
                      "akash",
                      "axelar",
                      "band-protocol",
                      "bitsong",
                      "canto",
                      "chihuahua",
                      "comdex",
                      "coreum",
                      "cosmos",
                      "crescent",
                      "cronos",
                      "cudos",
                      "desmos",
                      "dydx",
                      "evmos",
                      "fetch-ai",
                      "gravity-bridge",
                      "injective",
                      "irisnet",
                      "juno",
                      "kava",
                      "ki-network",
                      "mars-protocol",
                      "nym",
                      "okex-chain",
                      "onomy",
                      "osmosis",
                      "persistence",
                      "quicksilver",
                      "regen",
                      "secret",
                      "sentinel",
                      "sommelier",
                      "stafi",
                      "stargaze",
                      "stride",
                      "teritori",
                      "tgrade",
                      "umee",
                      "sei",
                      "mantra",
                      "celestia",
                      "saga",
                      "zetachain",
                      "dymension",
                      "humansai",
                      "neutron",
                      "polkadot",
                      "kusama",
                      "westend",
                      "bittensor",
                      "binancebeacon",
                      "cardano",
                      "near",
                      "solana",
                      "solana-devnet",
                      "stellar",
                      "stellar-testnet",
                      "tezos",
                      "tron",
                      "ton",
                      "ton-testnet",
                    ] as const),
                    address: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    logoURI: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    isPoints: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    coinGeckoId: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                  },
                },
                yieldSource: faker.helpers.arrayElement([
                  "staking",
                  "restaking",
                  "protocol_incentive",
                  "points",
                  "lending_interest",
                  "mev",
                  "real_world_asset_yield",
                ] as const),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              })),
            },
          },
          undefined,
        ]),
        provider: faker.helpers.arrayElement([
          {
            ...{
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
              website: faker.string.alpha({ length: { min: 10, max: 20 } }),
              rank: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              preferred: faker.datatype.boolean(),
              revshare: faker.helpers.arrayElement([
                {
                  ...{
                    trial: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                    standard: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                    pro: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                  },
                },
                undefined,
              ]),
            },
          },
          undefined,
        ]),
        commission: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        tvlUsd: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        tvl: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        votingPower: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        preferred: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        minimumStake: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        remainingPossibleStake: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        remainingSlots: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        nominatorCount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        status: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        providerId: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        pricePerShare: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        subnetId: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        subnetName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        marketCap: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        tokenSymbol: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      })),
      undefined,
    ]),
    amountUsd: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isEarning: faker.datatype.boolean(),
  })),
  ...overrideResponse,
});

export const getYieldsControllerGetYieldBalancesResponseMock = (
  overrideResponse: Partial<YieldBalancesDto> = {},
): YieldBalancesDto => ({
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  balances: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    address: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(BalanceType)),
    amount: faker.string.alpha({ length: { min: 10, max: 20 } }),
    amountRaw: faker.string.alpha({ length: { min: 10, max: 20 } }),
    date: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    feeConfigurationId: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    pendingActions: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
      type: faker.helpers.arrayElement([
        "STAKE",
        "UNSTAKE",
        "CLAIM_REWARDS",
        "RESTAKE_REWARDS",
        "WITHDRAW",
        "WITHDRAW_ALL",
        "RESTAKE",
        "CLAIM_UNSTAKED",
        "UNLOCK_LOCKED",
        "STAKE_LOCKED",
        "VOTE",
        "REVOKE",
        "VOTE_LOCKED",
        "REVOTE",
        "REBOND",
        "MIGRATE",
        "VERIFY_WITHDRAW_CREDENTIALS",
        "DELEGATE",
      ] as const),
      passthrough: faker.string.alpha({ length: { min: 10, max: 20 } }),
      arguments: faker.helpers.arrayElement([
        {
          ...{
            fields: Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                "amount",
                "validatorAddress",
                "validatorAddresses",
                "providerId",
                "duration",
                "inputToken",
                "subnetId",
                "tronResource",
                "feeConfigurationId",
                "cosmosPubKey",
                "tezosPubKey",
                "cAddressBech",
                "pAddressBech",
                "executionMode",
                "ledgerWalletApiCompatible",
              ] as const),
              type: faker.helpers.arrayElement([
                "string",
                "number",
                "address",
                "enum",
                "boolean",
              ] as const),
              label: faker.string.alpha({ length: { min: 10, max: 20 } }),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              required: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              options: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() =>
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                ),
                undefined,
              ]),
              optionsRef: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              default: faker.helpers.arrayElement([{}, undefined]),
              placeholder: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              minimum: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  null,
                ]),
                undefined,
              ]),
              maximum: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  null,
                ]),
                undefined,
              ]),
              isArray: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            })),
            notes: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
          },
        },
        undefined,
      ]),
    })),
    token: {
      ...{
        symbol: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        decimals: faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        network: faker.helpers.arrayElement([
          "ethereum",
          "ethereum-goerli",
          "ethereum-holesky",
          "ethereum-sepolia",
          "ethereum-hoodi",
          "arbitrum",
          "base",
          "base-sepolia",
          "gnosis",
          "optimism",
          "polygon",
          "polygon-amoy",
          "starknet",
          "zksync",
          "linea",
          "unichain",
          "avalanche-c",
          "avalanche-c-atomic",
          "avalanche-p",
          "binance",
          "celo",
          "fantom",
          "harmony",
          "moonriver",
          "okc",
          "viction",
          "core",
          "sonic",
          "katana",
          "agoric",
          "akash",
          "axelar",
          "band-protocol",
          "bitsong",
          "canto",
          "chihuahua",
          "comdex",
          "coreum",
          "cosmos",
          "crescent",
          "cronos",
          "cudos",
          "desmos",
          "dydx",
          "evmos",
          "fetch-ai",
          "gravity-bridge",
          "injective",
          "irisnet",
          "juno",
          "kava",
          "ki-network",
          "mars-protocol",
          "nym",
          "okex-chain",
          "onomy",
          "osmosis",
          "persistence",
          "quicksilver",
          "regen",
          "secret",
          "sentinel",
          "sommelier",
          "stafi",
          "stargaze",
          "stride",
          "teritori",
          "tgrade",
          "umee",
          "sei",
          "mantra",
          "celestia",
          "saga",
          "zetachain",
          "dymension",
          "humansai",
          "neutron",
          "polkadot",
          "kusama",
          "westend",
          "bittensor",
          "binancebeacon",
          "cardano",
          "near",
          "solana",
          "solana-devnet",
          "stellar",
          "stellar-testnet",
          "tezos",
          "tron",
          "ton",
          "ton-testnet",
        ] as const),
        address: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        logoURI: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        isPoints: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        coinGeckoId: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      },
    },
    validator: faker.helpers.arrayElement([
      {
        ...{
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          website: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          rewardRate: faker.helpers.arrayElement([
            {
              ...{
                total: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                components: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  rate: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  rateType: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  token: {
                    ...{
                      symbol: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      name: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      decimals: faker.number.float({
                        min: undefined,
                        max: undefined,
                        fractionDigits: 2,
                      }),
                      network: faker.helpers.arrayElement([
                        "ethereum",
                        "ethereum-goerli",
                        "ethereum-holesky",
                        "ethereum-sepolia",
                        "ethereum-hoodi",
                        "arbitrum",
                        "base",
                        "base-sepolia",
                        "gnosis",
                        "optimism",
                        "polygon",
                        "polygon-amoy",
                        "starknet",
                        "zksync",
                        "linea",
                        "unichain",
                        "avalanche-c",
                        "avalanche-c-atomic",
                        "avalanche-p",
                        "binance",
                        "celo",
                        "fantom",
                        "harmony",
                        "moonriver",
                        "okc",
                        "viction",
                        "core",
                        "sonic",
                        "katana",
                        "agoric",
                        "akash",
                        "axelar",
                        "band-protocol",
                        "bitsong",
                        "canto",
                        "chihuahua",
                        "comdex",
                        "coreum",
                        "cosmos",
                        "crescent",
                        "cronos",
                        "cudos",
                        "desmos",
                        "dydx",
                        "evmos",
                        "fetch-ai",
                        "gravity-bridge",
                        "injective",
                        "irisnet",
                        "juno",
                        "kava",
                        "ki-network",
                        "mars-protocol",
                        "nym",
                        "okex-chain",
                        "onomy",
                        "osmosis",
                        "persistence",
                        "quicksilver",
                        "regen",
                        "secret",
                        "sentinel",
                        "sommelier",
                        "stafi",
                        "stargaze",
                        "stride",
                        "teritori",
                        "tgrade",
                        "umee",
                        "sei",
                        "mantra",
                        "celestia",
                        "saga",
                        "zetachain",
                        "dymension",
                        "humansai",
                        "neutron",
                        "polkadot",
                        "kusama",
                        "westend",
                        "bittensor",
                        "binancebeacon",
                        "cardano",
                        "near",
                        "solana",
                        "solana-devnet",
                        "stellar",
                        "stellar-testnet",
                        "tezos",
                        "tron",
                        "ton",
                        "ton-testnet",
                      ] as const),
                      address: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      logoURI: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      isPoints: faker.helpers.arrayElement([
                        faker.datatype.boolean(),
                        undefined,
                      ]),
                      coinGeckoId: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                    },
                  },
                  yieldSource: faker.helpers.arrayElement([
                    "staking",
                    "restaking",
                    "protocol_incentive",
                    "points",
                    "lending_interest",
                    "mev",
                    "real_world_asset_yield",
                  ] as const),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                })),
              },
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            {
              ...{
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
                website: faker.string.alpha({ length: { min: 10, max: 20 } }),
                rank: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                preferred: faker.datatype.boolean(),
                revshare: faker.helpers.arrayElement([
                  {
                    ...{
                      trial: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      standard: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      pro: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                    },
                  },
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          commission: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          tvlUsd: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tvl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          votingPower: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          preferred: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minimumStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingPossibleStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingSlots: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          nominatorCount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          status: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          providerId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          pricePerShare: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          subnetId: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          subnetName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          marketCap: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tokenSymbol: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
      },
      undefined,
    ]),
    validators: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        address: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        logoURI: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        website: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        rewardRate: faker.helpers.arrayElement([
          {
            ...{
              total: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
              components: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => ({
                rate: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                token: {
                  ...{
                    symbol: faker.string.alpha({
                      length: { min: 10, max: 20 },
                    }),
                    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                    decimals: faker.number.float({
                      min: undefined,
                      max: undefined,
                      fractionDigits: 2,
                    }),
                    network: faker.helpers.arrayElement([
                      "ethereum",
                      "ethereum-goerli",
                      "ethereum-holesky",
                      "ethereum-sepolia",
                      "ethereum-hoodi",
                      "arbitrum",
                      "base",
                      "base-sepolia",
                      "gnosis",
                      "optimism",
                      "polygon",
                      "polygon-amoy",
                      "starknet",
                      "zksync",
                      "linea",
                      "unichain",
                      "avalanche-c",
                      "avalanche-c-atomic",
                      "avalanche-p",
                      "binance",
                      "celo",
                      "fantom",
                      "harmony",
                      "moonriver",
                      "okc",
                      "viction",
                      "core",
                      "sonic",
                      "katana",
                      "agoric",
                      "akash",
                      "axelar",
                      "band-protocol",
                      "bitsong",
                      "canto",
                      "chihuahua",
                      "comdex",
                      "coreum",
                      "cosmos",
                      "crescent",
                      "cronos",
                      "cudos",
                      "desmos",
                      "dydx",
                      "evmos",
                      "fetch-ai",
                      "gravity-bridge",
                      "injective",
                      "irisnet",
                      "juno",
                      "kava",
                      "ki-network",
                      "mars-protocol",
                      "nym",
                      "okex-chain",
                      "onomy",
                      "osmosis",
                      "persistence",
                      "quicksilver",
                      "regen",
                      "secret",
                      "sentinel",
                      "sommelier",
                      "stafi",
                      "stargaze",
                      "stride",
                      "teritori",
                      "tgrade",
                      "umee",
                      "sei",
                      "mantra",
                      "celestia",
                      "saga",
                      "zetachain",
                      "dymension",
                      "humansai",
                      "neutron",
                      "polkadot",
                      "kusama",
                      "westend",
                      "bittensor",
                      "binancebeacon",
                      "cardano",
                      "near",
                      "solana",
                      "solana-devnet",
                      "stellar",
                      "stellar-testnet",
                      "tezos",
                      "tron",
                      "ton",
                      "ton-testnet",
                    ] as const),
                    address: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    logoURI: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                    isPoints: faker.helpers.arrayElement([
                      faker.datatype.boolean(),
                      undefined,
                    ]),
                    coinGeckoId: faker.helpers.arrayElement([
                      faker.string.alpha({ length: { min: 10, max: 20 } }),
                      undefined,
                    ]),
                  },
                },
                yieldSource: faker.helpers.arrayElement([
                  "staking",
                  "restaking",
                  "protocol_incentive",
                  "points",
                  "lending_interest",
                  "mev",
                  "real_world_asset_yield",
                ] as const),
                description: faker.helpers.arrayElement([
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                  undefined,
                ]),
              })),
            },
          },
          undefined,
        ]),
        provider: faker.helpers.arrayElement([
          {
            ...{
              name: faker.string.alpha({ length: { min: 10, max: 20 } }),
              uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
              website: faker.string.alpha({ length: { min: 10, max: 20 } }),
              rank: faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              preferred: faker.datatype.boolean(),
              revshare: faker.helpers.arrayElement([
                {
                  ...{
                    trial: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                    standard: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                    pro: faker.helpers.arrayElement([
                      {
                        ...{
                          minRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                          maxRevShare: faker.number.float({
                            min: undefined,
                            max: undefined,
                            fractionDigits: 2,
                          }),
                        },
                      },
                      undefined,
                    ]),
                  },
                },
                undefined,
              ]),
            },
          },
          undefined,
        ]),
        commission: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        tvlUsd: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        tvl: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        votingPower: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        preferred: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        minimumStake: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        remainingPossibleStake: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        remainingSlots: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        nominatorCount: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        status: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        providerId: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        pricePerShare: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        subnetId: faker.helpers.arrayElement([
          faker.number.float({
            min: undefined,
            max: undefined,
            fractionDigits: 2,
          }),
          undefined,
        ]),
        subnetName: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        marketCap: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
        tokenSymbol: faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          undefined,
        ]),
      })),
      undefined,
    ]),
    amountUsd: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isEarning: faker.datatype.boolean(),
  })),
  ...overrideResponse,
});

export const getYieldsControllerGetYieldValidatorsResponseMock =
  (): YieldsControllerGetYieldValidators200 => ({
    ...{
      total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      offset: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      limit: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
    },
    ...{
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoURI: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          website: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          rewardRate: faker.helpers.arrayElement([
            {
              ...{
                total: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                rateType: faker.string.alpha({ length: { min: 10, max: 20 } }),
                components: Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => ({
                  rate: faker.number.float({
                    min: undefined,
                    max: undefined,
                    fractionDigits: 2,
                  }),
                  rateType: faker.string.alpha({
                    length: { min: 10, max: 20 },
                  }),
                  token: {
                    ...{
                      symbol: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      name: faker.string.alpha({
                        length: { min: 10, max: 20 },
                      }),
                      decimals: faker.number.float({
                        min: undefined,
                        max: undefined,
                        fractionDigits: 2,
                      }),
                      network: faker.helpers.arrayElement([
                        "ethereum",
                        "ethereum-goerli",
                        "ethereum-holesky",
                        "ethereum-sepolia",
                        "ethereum-hoodi",
                        "arbitrum",
                        "base",
                        "base-sepolia",
                        "gnosis",
                        "optimism",
                        "polygon",
                        "polygon-amoy",
                        "starknet",
                        "zksync",
                        "linea",
                        "unichain",
                        "avalanche-c",
                        "avalanche-c-atomic",
                        "avalanche-p",
                        "binance",
                        "celo",
                        "fantom",
                        "harmony",
                        "moonriver",
                        "okc",
                        "viction",
                        "core",
                        "sonic",
                        "katana",
                        "agoric",
                        "akash",
                        "axelar",
                        "band-protocol",
                        "bitsong",
                        "canto",
                        "chihuahua",
                        "comdex",
                        "coreum",
                        "cosmos",
                        "crescent",
                        "cronos",
                        "cudos",
                        "desmos",
                        "dydx",
                        "evmos",
                        "fetch-ai",
                        "gravity-bridge",
                        "injective",
                        "irisnet",
                        "juno",
                        "kava",
                        "ki-network",
                        "mars-protocol",
                        "nym",
                        "okex-chain",
                        "onomy",
                        "osmosis",
                        "persistence",
                        "quicksilver",
                        "regen",
                        "secret",
                        "sentinel",
                        "sommelier",
                        "stafi",
                        "stargaze",
                        "stride",
                        "teritori",
                        "tgrade",
                        "umee",
                        "sei",
                        "mantra",
                        "celestia",
                        "saga",
                        "zetachain",
                        "dymension",
                        "humansai",
                        "neutron",
                        "polkadot",
                        "kusama",
                        "westend",
                        "bittensor",
                        "binancebeacon",
                        "cardano",
                        "near",
                        "solana",
                        "solana-devnet",
                        "stellar",
                        "stellar-testnet",
                        "tezos",
                        "tron",
                        "ton",
                        "ton-testnet",
                      ] as const),
                      address: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      logoURI: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                      isPoints: faker.helpers.arrayElement([
                        faker.datatype.boolean(),
                        undefined,
                      ]),
                      coinGeckoId: faker.helpers.arrayElement([
                        faker.string.alpha({ length: { min: 10, max: 20 } }),
                        undefined,
                      ]),
                    },
                  },
                  yieldSource: faker.helpers.arrayElement([
                    "staking",
                    "restaking",
                    "protocol_incentive",
                    "points",
                    "lending_interest",
                    "mev",
                    "real_world_asset_yield",
                  ] as const),
                  description: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                })),
              },
            },
            undefined,
          ]),
          provider: faker.helpers.arrayElement([
            {
              ...{
                name: faker.string.alpha({ length: { min: 10, max: 20 } }),
                uniqueId: faker.string.alpha({ length: { min: 10, max: 20 } }),
                website: faker.string.alpha({ length: { min: 10, max: 20 } }),
                rank: faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                preferred: faker.datatype.boolean(),
                revshare: faker.helpers.arrayElement([
                  {
                    ...{
                      trial: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      standard: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                      pro: faker.helpers.arrayElement([
                        {
                          ...{
                            minRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                            maxRevShare: faker.number.float({
                              min: undefined,
                              max: undefined,
                              fractionDigits: 2,
                            }),
                          },
                        },
                        undefined,
                      ]),
                    },
                  },
                  undefined,
                ]),
              },
            },
            undefined,
          ]),
          commission: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          tvlUsd: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tvl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          votingPower: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          preferred: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          minimumStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingPossibleStake: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          remainingSlots: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          nominatorCount: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          status: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          providerId: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          pricePerShare: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          subnetId: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          subnetName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          marketCap: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          tokenSymbol: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })),
        undefined,
      ]),
    },
  });

export const getActionsControllerGetActionsResponseMock =
  (): ActionsControllerGetActions200 => ({
    ...{
      total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      offset: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      limit: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
    },
    ...{
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          intent: faker.helpers.arrayElement([
            "enter",
            "manage",
            "exit",
          ] as const),
          type: faker.helpers.arrayElement([
            "STAKE",
            "UNSTAKE",
            "CLAIM_REWARDS",
            "RESTAKE_REWARDS",
            "WITHDRAW",
            "WITHDRAW_ALL",
            "RESTAKE",
            "CLAIM_UNSTAKED",
            "UNLOCK_LOCKED",
            "STAKE_LOCKED",
            "VOTE",
            "REVOKE",
            "VOTE_LOCKED",
            "REVOTE",
            "REBOND",
            "MIGRATE",
            "VERIFY_WITHDRAW_CREDENTIALS",
            "DELEGATE",
          ] as const),
          yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
          address: faker.string.alpha({ length: { min: 10, max: 20 } }),
          amount: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          amountRaw: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          amountUsd: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            null,
          ]),
          transactions: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            id: faker.string.alpha({ length: { min: 10, max: 20 } }),
            title: faker.string.alpha({ length: { min: 10, max: 20 } }),
            network: faker.helpers.arrayElement([
              "ethereum",
              "ethereum-goerli",
              "ethereum-holesky",
              "ethereum-sepolia",
              "ethereum-hoodi",
              "arbitrum",
              "base",
              "base-sepolia",
              "gnosis",
              "optimism",
              "polygon",
              "polygon-amoy",
              "starknet",
              "zksync",
              "linea",
              "unichain",
              "avalanche-c",
              "avalanche-c-atomic",
              "avalanche-p",
              "binance",
              "celo",
              "fantom",
              "harmony",
              "moonriver",
              "okc",
              "viction",
              "core",
              "sonic",
              "katana",
              "agoric",
              "akash",
              "axelar",
              "band-protocol",
              "bitsong",
              "canto",
              "chihuahua",
              "comdex",
              "coreum",
              "cosmos",
              "crescent",
              "cronos",
              "cudos",
              "desmos",
              "dydx",
              "evmos",
              "fetch-ai",
              "gravity-bridge",
              "injective",
              "irisnet",
              "juno",
              "kava",
              "ki-network",
              "mars-protocol",
              "nym",
              "okex-chain",
              "onomy",
              "osmosis",
              "persistence",
              "quicksilver",
              "regen",
              "secret",
              "sentinel",
              "sommelier",
              "stafi",
              "stargaze",
              "stride",
              "teritori",
              "tgrade",
              "umee",
              "sei",
              "mantra",
              "celestia",
              "saga",
              "zetachain",
              "dymension",
              "humansai",
              "neutron",
              "polkadot",
              "kusama",
              "westend",
              "bittensor",
              "binancebeacon",
              "cardano",
              "near",
              "solana",
              "solana-devnet",
              "stellar",
              "stellar-testnet",
              "tezos",
              "tron",
              "ton",
              "ton-testnet",
            ] as const),
            status: faker.helpers.arrayElement([
              "NOT_FOUND",
              "CREATED",
              "BLOCKED",
              "WAITING_FOR_SIGNATURE",
              "SIGNED",
              "BROADCASTED",
              "PENDING",
              "CONFIRMED",
              "FAILED",
              "SKIPPED",
            ] as const),
            type: faker.helpers.arrayElement([
              "SWAP",
              "DEPOSIT",
              "APPROVAL",
              "STAKE",
              "CLAIM_UNSTAKED",
              "CLAIM_REWARDS",
              "RESTAKE_REWARDS",
              "UNSTAKE",
              "SPLIT",
              "MERGE",
              "LOCK",
              "UNLOCK",
              "SUPPLY",
              "BRIDGE",
              "VOTE",
              "REVOKE",
              "RESTAKE",
              "REBOND",
              "WITHDRAW",
              "WITHDRAW_ALL",
              "CREATE_ACCOUNT",
              "REVEAL",
              "MIGRATE",
              "DELEGATE",
              "UNDELEGATE",
              "UTXO_P_TO_C_IMPORT",
              "UTXO_C_TO_P_IMPORT",
              "WRAP",
              "UNWRAP",
              "UNFREEZE_LEGACY",
              "UNFREEZE_LEGACY_BANDWIDTH",
              "UNFREEZE_LEGACY_ENERGY",
              "UNFREEZE_BANDWIDTH",
              "UNFREEZE_ENERGY",
              "FREEZE_BANDWIDTH",
              "FREEZE_ENERGY",
              "UNDELEGATE_BANDWIDTH",
              "UNDELEGATE_ENERGY",
              "P2P_NODE_REQUEST",
              "CREATE_EIGENPOD",
              "VERIFY_WITHDRAW_CREDENTIALS",
              "START_CHECKPOINT",
              "VERIFY_CHECKPOINT_PROOFS",
              "QUEUE_WITHDRAWALS",
              "COMPLETE_QUEUED_WITHDRAWALS",
              "LUGANODES_PROVISION",
              "LUGANODES_EXIT_REQUEST",
              "INFSTONES_PROVISION",
              "INFSTONES_EXIT_REQUEST",
              "INFSTONES_CLAIM_REQUEST",
            ] as const),
            hash: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
            broadcastedAt: faker.helpers.arrayElement([
              `${faker.date.past().toISOString().split(".")[0]}Z`,
              null,
            ]),
            signedTransaction: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              null,
            ]),
            unsignedTransaction: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
            ]),
            annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
            structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
            stepIndex: faker.helpers.arrayElement([
              faker.number.float({
                min: undefined,
                max: undefined,
                fractionDigits: 2,
              }),
              undefined,
            ]),
            description: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            error: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            gasEstimate: faker.helpers.arrayElement([
              faker.string.alpha({ length: { min: 10, max: 20 } }),
              undefined,
            ]),
            explorerUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                null,
              ]),
              undefined,
            ]),
            isMessage: faker.helpers.arrayElement([
              faker.datatype.boolean(),
              undefined,
            ]),
          })),
          executionPattern: faker.helpers.arrayElement([
            "synchronous",
            "asynchronous",
            "batch",
          ] as const),
          rawArguments: {
            ...{
              amount: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              validatorAddress: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              validatorAddresses: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() =>
                  faker.string.alpha({ length: { min: 10, max: 20 } }),
                ),
                undefined,
              ]),
              providerId: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              duration: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              inputToken: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              subnetId: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              tronResource: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["BANDWIDTH", "ENERGY"] as const),
                undefined,
              ]),
              feeConfigurationId: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              cosmosPubKey: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              tezosPubKey: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              cAddressBech: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              pAddressBech: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              executionMode: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["individual", "batched"] as const),
                undefined,
              ]),
              ledgerWalletApiCompatible: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
            },
          },
          createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
          completedAt: faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          status: faker.helpers.arrayElement([
            "CANCELED",
            "CREATED",
            "WAITING_FOR_NEXT",
            "PROCESSING",
            "FAILED",
            "SUCCESS",
            "STALE",
          ] as const),
        })),
        undefined,
      ]),
    },
  });

export const getActionsControllerGetActionResponseMock = (
  overrideResponse: Partial<ActionDto> = {},
): ActionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
  type: faker.helpers.arrayElement([
    "STAKE",
    "UNSTAKE",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "RESTAKE",
    "CLAIM_UNSTAKED",
    "UNLOCK_LOCKED",
    "STAKE_LOCKED",
    "VOTE",
    "REVOKE",
    "VOTE_LOCKED",
    "REVOTE",
    "REBOND",
    "MIGRATE",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "DELEGATE",
  ] as const),
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  address: faker.string.alpha({ length: { min: 10, max: 20 } }),
  amount: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountRaw: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountUsd: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    network: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    status: faker.helpers.arrayElement([
      "NOT_FOUND",
      "CREATED",
      "BLOCKED",
      "WAITING_FOR_SIGNATURE",
      "SIGNED",
      "BROADCASTED",
      "PENDING",
      "CONFIRMED",
      "FAILED",
      "SKIPPED",
    ] as const),
    type: faker.helpers.arrayElement([
      "SWAP",
      "DEPOSIT",
      "APPROVAL",
      "STAKE",
      "CLAIM_UNSTAKED",
      "CLAIM_REWARDS",
      "RESTAKE_REWARDS",
      "UNSTAKE",
      "SPLIT",
      "MERGE",
      "LOCK",
      "UNLOCK",
      "SUPPLY",
      "BRIDGE",
      "VOTE",
      "REVOKE",
      "RESTAKE",
      "REBOND",
      "WITHDRAW",
      "WITHDRAW_ALL",
      "CREATE_ACCOUNT",
      "REVEAL",
      "MIGRATE",
      "DELEGATE",
      "UNDELEGATE",
      "UTXO_P_TO_C_IMPORT",
      "UTXO_C_TO_P_IMPORT",
      "WRAP",
      "UNWRAP",
      "UNFREEZE_LEGACY",
      "UNFREEZE_LEGACY_BANDWIDTH",
      "UNFREEZE_LEGACY_ENERGY",
      "UNFREEZE_BANDWIDTH",
      "UNFREEZE_ENERGY",
      "FREEZE_BANDWIDTH",
      "FREEZE_ENERGY",
      "UNDELEGATE_BANDWIDTH",
      "UNDELEGATE_ENERGY",
      "P2P_NODE_REQUEST",
      "CREATE_EIGENPOD",
      "VERIFY_WITHDRAW_CREDENTIALS",
      "START_CHECKPOINT",
      "VERIFY_CHECKPOINT_PROOFS",
      "QUEUE_WITHDRAWALS",
      "COMPLETE_QUEUED_WITHDRAWALS",
      "LUGANODES_PROVISION",
      "LUGANODES_EXIT_REQUEST",
      "INFSTONES_PROVISION",
      "INFSTONES_EXIT_REQUEST",
      "INFSTONES_CLAIM_REQUEST",
    ] as const),
    hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    broadcastedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    signedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    unsignedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ]),
    annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
    structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
    stepIndex: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    error: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gasEstimate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    explorerUrl: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isMessage: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
  })),
  executionPattern: faker.helpers.arrayElement([
    "synchronous",
    "asynchronous",
    "batch",
  ] as const),
  rawArguments: {
    ...{
      amount: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddress: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      providerId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      inputToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      subnetId: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      tronResource: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BANDWIDTH", "ENERGY"] as const),
        undefined,
      ]),
      feeConfigurationId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cosmosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      tezosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      pAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      executionMode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["individual", "batched"] as const),
        undefined,
      ]),
      ledgerWalletApiCompatible: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  status: faker.helpers.arrayElement([
    "CANCELED",
    "CREATED",
    "WAITING_FOR_NEXT",
    "PROCESSING",
    "FAILED",
    "SUCCESS",
    "STALE",
  ] as const),
  ...overrideResponse,
});

export const getActionsControllerEnterYieldResponseMock = (
  overrideResponse: Partial<ActionDto> = {},
): ActionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
  type: faker.helpers.arrayElement([
    "STAKE",
    "UNSTAKE",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "RESTAKE",
    "CLAIM_UNSTAKED",
    "UNLOCK_LOCKED",
    "STAKE_LOCKED",
    "VOTE",
    "REVOKE",
    "VOTE_LOCKED",
    "REVOTE",
    "REBOND",
    "MIGRATE",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "DELEGATE",
  ] as const),
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  address: faker.string.alpha({ length: { min: 10, max: 20 } }),
  amount: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountRaw: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountUsd: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    network: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    status: faker.helpers.arrayElement([
      "NOT_FOUND",
      "CREATED",
      "BLOCKED",
      "WAITING_FOR_SIGNATURE",
      "SIGNED",
      "BROADCASTED",
      "PENDING",
      "CONFIRMED",
      "FAILED",
      "SKIPPED",
    ] as const),
    type: faker.helpers.arrayElement([
      "SWAP",
      "DEPOSIT",
      "APPROVAL",
      "STAKE",
      "CLAIM_UNSTAKED",
      "CLAIM_REWARDS",
      "RESTAKE_REWARDS",
      "UNSTAKE",
      "SPLIT",
      "MERGE",
      "LOCK",
      "UNLOCK",
      "SUPPLY",
      "BRIDGE",
      "VOTE",
      "REVOKE",
      "RESTAKE",
      "REBOND",
      "WITHDRAW",
      "WITHDRAW_ALL",
      "CREATE_ACCOUNT",
      "REVEAL",
      "MIGRATE",
      "DELEGATE",
      "UNDELEGATE",
      "UTXO_P_TO_C_IMPORT",
      "UTXO_C_TO_P_IMPORT",
      "WRAP",
      "UNWRAP",
      "UNFREEZE_LEGACY",
      "UNFREEZE_LEGACY_BANDWIDTH",
      "UNFREEZE_LEGACY_ENERGY",
      "UNFREEZE_BANDWIDTH",
      "UNFREEZE_ENERGY",
      "FREEZE_BANDWIDTH",
      "FREEZE_ENERGY",
      "UNDELEGATE_BANDWIDTH",
      "UNDELEGATE_ENERGY",
      "P2P_NODE_REQUEST",
      "CREATE_EIGENPOD",
      "VERIFY_WITHDRAW_CREDENTIALS",
      "START_CHECKPOINT",
      "VERIFY_CHECKPOINT_PROOFS",
      "QUEUE_WITHDRAWALS",
      "COMPLETE_QUEUED_WITHDRAWALS",
      "LUGANODES_PROVISION",
      "LUGANODES_EXIT_REQUEST",
      "INFSTONES_PROVISION",
      "INFSTONES_EXIT_REQUEST",
      "INFSTONES_CLAIM_REQUEST",
    ] as const),
    hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    broadcastedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    signedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    unsignedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ]),
    annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
    structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
    stepIndex: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    error: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gasEstimate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    explorerUrl: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isMessage: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
  })),
  executionPattern: faker.helpers.arrayElement([
    "synchronous",
    "asynchronous",
    "batch",
  ] as const),
  rawArguments: {
    ...{
      amount: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddress: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      providerId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      inputToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      subnetId: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      tronResource: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BANDWIDTH", "ENERGY"] as const),
        undefined,
      ]),
      feeConfigurationId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cosmosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      tezosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      pAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      executionMode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["individual", "batched"] as const),
        undefined,
      ]),
      ledgerWalletApiCompatible: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  status: faker.helpers.arrayElement([
    "CANCELED",
    "CREATED",
    "WAITING_FOR_NEXT",
    "PROCESSING",
    "FAILED",
    "SUCCESS",
    "STALE",
  ] as const),
  ...overrideResponse,
});

export const getActionsControllerExitYieldResponseMock = (
  overrideResponse: Partial<ActionDto> = {},
): ActionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
  type: faker.helpers.arrayElement([
    "STAKE",
    "UNSTAKE",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "RESTAKE",
    "CLAIM_UNSTAKED",
    "UNLOCK_LOCKED",
    "STAKE_LOCKED",
    "VOTE",
    "REVOKE",
    "VOTE_LOCKED",
    "REVOTE",
    "REBOND",
    "MIGRATE",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "DELEGATE",
  ] as const),
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  address: faker.string.alpha({ length: { min: 10, max: 20 } }),
  amount: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountRaw: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountUsd: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    network: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    status: faker.helpers.arrayElement([
      "NOT_FOUND",
      "CREATED",
      "BLOCKED",
      "WAITING_FOR_SIGNATURE",
      "SIGNED",
      "BROADCASTED",
      "PENDING",
      "CONFIRMED",
      "FAILED",
      "SKIPPED",
    ] as const),
    type: faker.helpers.arrayElement([
      "SWAP",
      "DEPOSIT",
      "APPROVAL",
      "STAKE",
      "CLAIM_UNSTAKED",
      "CLAIM_REWARDS",
      "RESTAKE_REWARDS",
      "UNSTAKE",
      "SPLIT",
      "MERGE",
      "LOCK",
      "UNLOCK",
      "SUPPLY",
      "BRIDGE",
      "VOTE",
      "REVOKE",
      "RESTAKE",
      "REBOND",
      "WITHDRAW",
      "WITHDRAW_ALL",
      "CREATE_ACCOUNT",
      "REVEAL",
      "MIGRATE",
      "DELEGATE",
      "UNDELEGATE",
      "UTXO_P_TO_C_IMPORT",
      "UTXO_C_TO_P_IMPORT",
      "WRAP",
      "UNWRAP",
      "UNFREEZE_LEGACY",
      "UNFREEZE_LEGACY_BANDWIDTH",
      "UNFREEZE_LEGACY_ENERGY",
      "UNFREEZE_BANDWIDTH",
      "UNFREEZE_ENERGY",
      "FREEZE_BANDWIDTH",
      "FREEZE_ENERGY",
      "UNDELEGATE_BANDWIDTH",
      "UNDELEGATE_ENERGY",
      "P2P_NODE_REQUEST",
      "CREATE_EIGENPOD",
      "VERIFY_WITHDRAW_CREDENTIALS",
      "START_CHECKPOINT",
      "VERIFY_CHECKPOINT_PROOFS",
      "QUEUE_WITHDRAWALS",
      "COMPLETE_QUEUED_WITHDRAWALS",
      "LUGANODES_PROVISION",
      "LUGANODES_EXIT_REQUEST",
      "INFSTONES_PROVISION",
      "INFSTONES_EXIT_REQUEST",
      "INFSTONES_CLAIM_REQUEST",
    ] as const),
    hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    broadcastedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    signedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    unsignedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ]),
    annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
    structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
    stepIndex: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    error: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gasEstimate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    explorerUrl: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isMessage: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
  })),
  executionPattern: faker.helpers.arrayElement([
    "synchronous",
    "asynchronous",
    "batch",
  ] as const),
  rawArguments: {
    ...{
      amount: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddress: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      providerId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      inputToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      subnetId: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      tronResource: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BANDWIDTH", "ENERGY"] as const),
        undefined,
      ]),
      feeConfigurationId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cosmosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      tezosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      pAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      executionMode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["individual", "batched"] as const),
        undefined,
      ]),
      ledgerWalletApiCompatible: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  status: faker.helpers.arrayElement([
    "CANCELED",
    "CREATED",
    "WAITING_FOR_NEXT",
    "PROCESSING",
    "FAILED",
    "SUCCESS",
    "STALE",
  ] as const),
  ...overrideResponse,
});

export const getActionsControllerManageYieldResponseMock = (
  overrideResponse: Partial<ActionDto> = {},
): ActionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  intent: faker.helpers.arrayElement(["enter", "manage", "exit"] as const),
  type: faker.helpers.arrayElement([
    "STAKE",
    "UNSTAKE",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "RESTAKE",
    "CLAIM_UNSTAKED",
    "UNLOCK_LOCKED",
    "STAKE_LOCKED",
    "VOTE",
    "REVOKE",
    "VOTE_LOCKED",
    "REVOTE",
    "REBOND",
    "MIGRATE",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "DELEGATE",
  ] as const),
  yieldId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  address: faker.string.alpha({ length: { min: 10, max: 20 } }),
  amount: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountRaw: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  amountUsd: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  transactions: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    network: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    status: faker.helpers.arrayElement([
      "NOT_FOUND",
      "CREATED",
      "BLOCKED",
      "WAITING_FOR_SIGNATURE",
      "SIGNED",
      "BROADCASTED",
      "PENDING",
      "CONFIRMED",
      "FAILED",
      "SKIPPED",
    ] as const),
    type: faker.helpers.arrayElement([
      "SWAP",
      "DEPOSIT",
      "APPROVAL",
      "STAKE",
      "CLAIM_UNSTAKED",
      "CLAIM_REWARDS",
      "RESTAKE_REWARDS",
      "UNSTAKE",
      "SPLIT",
      "MERGE",
      "LOCK",
      "UNLOCK",
      "SUPPLY",
      "BRIDGE",
      "VOTE",
      "REVOKE",
      "RESTAKE",
      "REBOND",
      "WITHDRAW",
      "WITHDRAW_ALL",
      "CREATE_ACCOUNT",
      "REVEAL",
      "MIGRATE",
      "DELEGATE",
      "UNDELEGATE",
      "UTXO_P_TO_C_IMPORT",
      "UTXO_C_TO_P_IMPORT",
      "WRAP",
      "UNWRAP",
      "UNFREEZE_LEGACY",
      "UNFREEZE_LEGACY_BANDWIDTH",
      "UNFREEZE_LEGACY_ENERGY",
      "UNFREEZE_BANDWIDTH",
      "UNFREEZE_ENERGY",
      "FREEZE_BANDWIDTH",
      "FREEZE_ENERGY",
      "UNDELEGATE_BANDWIDTH",
      "UNDELEGATE_ENERGY",
      "P2P_NODE_REQUEST",
      "CREATE_EIGENPOD",
      "VERIFY_WITHDRAW_CREDENTIALS",
      "START_CHECKPOINT",
      "VERIFY_CHECKPOINT_PROOFS",
      "QUEUE_WITHDRAWALS",
      "COMPLETE_QUEUED_WITHDRAWALS",
      "LUGANODES_PROVISION",
      "LUGANODES_EXIT_REQUEST",
      "INFSTONES_PROVISION",
      "INFSTONES_EXIT_REQUEST",
      "INFSTONES_CLAIM_REQUEST",
    ] as const),
    hash: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    broadcastedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    signedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    unsignedTransaction: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
    ]),
    annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
    structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
    stepIndex: faker.helpers.arrayElement([
      faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    error: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gasEstimate: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
    explorerUrl: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    isMessage: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
  })),
  executionPattern: faker.helpers.arrayElement([
    "synchronous",
    "asynchronous",
    "batch",
  ] as const),
  rawArguments: {
    ...{
      amount: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddress: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      validatorAddresses: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      providerId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      duration: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      inputToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      subnetId: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      tronResource: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["BANDWIDTH", "ENERGY"] as const),
        undefined,
      ]),
      feeConfigurationId: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cosmosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      tezosPubKey: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      cAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      pAddressBech: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      executionMode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["individual", "batched"] as const),
        undefined,
      ]),
      ledgerWalletApiCompatible: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  completedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  status: faker.helpers.arrayElement([
    "CANCELED",
    "CREATED",
    "WAITING_FOR_NEXT",
    "PROCESSING",
    "FAILED",
    "SUCCESS",
    "STALE",
  ] as const),
  ...overrideResponse,
});

export const getTransactionsControllerSubmitTransactionHashResponseMock = (
  overrideResponse: Partial<TransactionDto> = {},
): TransactionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  network: faker.helpers.arrayElement([
    "ethereum",
    "ethereum-goerli",
    "ethereum-holesky",
    "ethereum-sepolia",
    "ethereum-hoodi",
    "arbitrum",
    "base",
    "base-sepolia",
    "gnosis",
    "optimism",
    "polygon",
    "polygon-amoy",
    "starknet",
    "zksync",
    "linea",
    "unichain",
    "avalanche-c",
    "avalanche-c-atomic",
    "avalanche-p",
    "binance",
    "celo",
    "fantom",
    "harmony",
    "moonriver",
    "okc",
    "viction",
    "core",
    "sonic",
    "katana",
    "agoric",
    "akash",
    "axelar",
    "band-protocol",
    "bitsong",
    "canto",
    "chihuahua",
    "comdex",
    "coreum",
    "cosmos",
    "crescent",
    "cronos",
    "cudos",
    "desmos",
    "dydx",
    "evmos",
    "fetch-ai",
    "gravity-bridge",
    "injective",
    "irisnet",
    "juno",
    "kava",
    "ki-network",
    "mars-protocol",
    "nym",
    "okex-chain",
    "onomy",
    "osmosis",
    "persistence",
    "quicksilver",
    "regen",
    "secret",
    "sentinel",
    "sommelier",
    "stafi",
    "stargaze",
    "stride",
    "teritori",
    "tgrade",
    "umee",
    "sei",
    "mantra",
    "celestia",
    "saga",
    "zetachain",
    "dymension",
    "humansai",
    "neutron",
    "polkadot",
    "kusama",
    "westend",
    "bittensor",
    "binancebeacon",
    "cardano",
    "near",
    "solana",
    "solana-devnet",
    "stellar",
    "stellar-testnet",
    "tezos",
    "tron",
    "ton",
    "ton-testnet",
  ] as const),
  status: faker.helpers.arrayElement([
    "NOT_FOUND",
    "CREATED",
    "BLOCKED",
    "WAITING_FOR_SIGNATURE",
    "SIGNED",
    "BROADCASTED",
    "PENDING",
    "CONFIRMED",
    "FAILED",
    "SKIPPED",
  ] as const),
  type: faker.helpers.arrayElement([
    "SWAP",
    "DEPOSIT",
    "APPROVAL",
    "STAKE",
    "CLAIM_UNSTAKED",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "UNSTAKE",
    "SPLIT",
    "MERGE",
    "LOCK",
    "UNLOCK",
    "SUPPLY",
    "BRIDGE",
    "VOTE",
    "REVOKE",
    "RESTAKE",
    "REBOND",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "CREATE_ACCOUNT",
    "REVEAL",
    "MIGRATE",
    "DELEGATE",
    "UNDELEGATE",
    "UTXO_P_TO_C_IMPORT",
    "UTXO_C_TO_P_IMPORT",
    "WRAP",
    "UNWRAP",
    "UNFREEZE_LEGACY",
    "UNFREEZE_LEGACY_BANDWIDTH",
    "UNFREEZE_LEGACY_ENERGY",
    "UNFREEZE_BANDWIDTH",
    "UNFREEZE_ENERGY",
    "FREEZE_BANDWIDTH",
    "FREEZE_ENERGY",
    "UNDELEGATE_BANDWIDTH",
    "UNDELEGATE_ENERGY",
    "P2P_NODE_REQUEST",
    "CREATE_EIGENPOD",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "START_CHECKPOINT",
    "VERIFY_CHECKPOINT_PROOFS",
    "QUEUE_WITHDRAWALS",
    "COMPLETE_QUEUED_WITHDRAWALS",
    "LUGANODES_PROVISION",
    "LUGANODES_EXIT_REQUEST",
    "INFSTONES_PROVISION",
    "INFSTONES_EXIT_REQUEST",
    "INFSTONES_CLAIM_REQUEST",
  ] as const),
  hash: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  broadcastedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  signedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  unsignedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
  ]),
  annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
  structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
  stepIndex: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gasEstimate: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  explorerUrl: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  isMessage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getTransactionsControllerSubmitTransactionResponseMock = (
  overrideResponse: Partial<TransactionDto> = {},
): TransactionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  network: faker.helpers.arrayElement([
    "ethereum",
    "ethereum-goerli",
    "ethereum-holesky",
    "ethereum-sepolia",
    "ethereum-hoodi",
    "arbitrum",
    "base",
    "base-sepolia",
    "gnosis",
    "optimism",
    "polygon",
    "polygon-amoy",
    "starknet",
    "zksync",
    "linea",
    "unichain",
    "avalanche-c",
    "avalanche-c-atomic",
    "avalanche-p",
    "binance",
    "celo",
    "fantom",
    "harmony",
    "moonriver",
    "okc",
    "viction",
    "core",
    "sonic",
    "katana",
    "agoric",
    "akash",
    "axelar",
    "band-protocol",
    "bitsong",
    "canto",
    "chihuahua",
    "comdex",
    "coreum",
    "cosmos",
    "crescent",
    "cronos",
    "cudos",
    "desmos",
    "dydx",
    "evmos",
    "fetch-ai",
    "gravity-bridge",
    "injective",
    "irisnet",
    "juno",
    "kava",
    "ki-network",
    "mars-protocol",
    "nym",
    "okex-chain",
    "onomy",
    "osmosis",
    "persistence",
    "quicksilver",
    "regen",
    "secret",
    "sentinel",
    "sommelier",
    "stafi",
    "stargaze",
    "stride",
    "teritori",
    "tgrade",
    "umee",
    "sei",
    "mantra",
    "celestia",
    "saga",
    "zetachain",
    "dymension",
    "humansai",
    "neutron",
    "polkadot",
    "kusama",
    "westend",
    "bittensor",
    "binancebeacon",
    "cardano",
    "near",
    "solana",
    "solana-devnet",
    "stellar",
    "stellar-testnet",
    "tezos",
    "tron",
    "ton",
    "ton-testnet",
  ] as const),
  status: faker.helpers.arrayElement([
    "NOT_FOUND",
    "CREATED",
    "BLOCKED",
    "WAITING_FOR_SIGNATURE",
    "SIGNED",
    "BROADCASTED",
    "PENDING",
    "CONFIRMED",
    "FAILED",
    "SKIPPED",
  ] as const),
  type: faker.helpers.arrayElement([
    "SWAP",
    "DEPOSIT",
    "APPROVAL",
    "STAKE",
    "CLAIM_UNSTAKED",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "UNSTAKE",
    "SPLIT",
    "MERGE",
    "LOCK",
    "UNLOCK",
    "SUPPLY",
    "BRIDGE",
    "VOTE",
    "REVOKE",
    "RESTAKE",
    "REBOND",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "CREATE_ACCOUNT",
    "REVEAL",
    "MIGRATE",
    "DELEGATE",
    "UNDELEGATE",
    "UTXO_P_TO_C_IMPORT",
    "UTXO_C_TO_P_IMPORT",
    "WRAP",
    "UNWRAP",
    "UNFREEZE_LEGACY",
    "UNFREEZE_LEGACY_BANDWIDTH",
    "UNFREEZE_LEGACY_ENERGY",
    "UNFREEZE_BANDWIDTH",
    "UNFREEZE_ENERGY",
    "FREEZE_BANDWIDTH",
    "FREEZE_ENERGY",
    "UNDELEGATE_BANDWIDTH",
    "UNDELEGATE_ENERGY",
    "P2P_NODE_REQUEST",
    "CREATE_EIGENPOD",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "START_CHECKPOINT",
    "VERIFY_CHECKPOINT_PROOFS",
    "QUEUE_WITHDRAWALS",
    "COMPLETE_QUEUED_WITHDRAWALS",
    "LUGANODES_PROVISION",
    "LUGANODES_EXIT_REQUEST",
    "INFSTONES_PROVISION",
    "INFSTONES_EXIT_REQUEST",
    "INFSTONES_CLAIM_REQUEST",
  ] as const),
  hash: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  broadcastedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  signedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  unsignedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
  ]),
  annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
  structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
  stepIndex: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gasEstimate: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  explorerUrl: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  isMessage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getTransactionsControllerGetTransactionResponseMock = (
  overrideResponse: Partial<TransactionDto> = {},
): TransactionDto => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  title: faker.string.alpha({ length: { min: 10, max: 20 } }),
  network: faker.helpers.arrayElement([
    "ethereum",
    "ethereum-goerli",
    "ethereum-holesky",
    "ethereum-sepolia",
    "ethereum-hoodi",
    "arbitrum",
    "base",
    "base-sepolia",
    "gnosis",
    "optimism",
    "polygon",
    "polygon-amoy",
    "starknet",
    "zksync",
    "linea",
    "unichain",
    "avalanche-c",
    "avalanche-c-atomic",
    "avalanche-p",
    "binance",
    "celo",
    "fantom",
    "harmony",
    "moonriver",
    "okc",
    "viction",
    "core",
    "sonic",
    "katana",
    "agoric",
    "akash",
    "axelar",
    "band-protocol",
    "bitsong",
    "canto",
    "chihuahua",
    "comdex",
    "coreum",
    "cosmos",
    "crescent",
    "cronos",
    "cudos",
    "desmos",
    "dydx",
    "evmos",
    "fetch-ai",
    "gravity-bridge",
    "injective",
    "irisnet",
    "juno",
    "kava",
    "ki-network",
    "mars-protocol",
    "nym",
    "okex-chain",
    "onomy",
    "osmosis",
    "persistence",
    "quicksilver",
    "regen",
    "secret",
    "sentinel",
    "sommelier",
    "stafi",
    "stargaze",
    "stride",
    "teritori",
    "tgrade",
    "umee",
    "sei",
    "mantra",
    "celestia",
    "saga",
    "zetachain",
    "dymension",
    "humansai",
    "neutron",
    "polkadot",
    "kusama",
    "westend",
    "bittensor",
    "binancebeacon",
    "cardano",
    "near",
    "solana",
    "solana-devnet",
    "stellar",
    "stellar-testnet",
    "tezos",
    "tron",
    "ton",
    "ton-testnet",
  ] as const),
  status: faker.helpers.arrayElement([
    "NOT_FOUND",
    "CREATED",
    "BLOCKED",
    "WAITING_FOR_SIGNATURE",
    "SIGNED",
    "BROADCASTED",
    "PENDING",
    "CONFIRMED",
    "FAILED",
    "SKIPPED",
  ] as const),
  type: faker.helpers.arrayElement([
    "SWAP",
    "DEPOSIT",
    "APPROVAL",
    "STAKE",
    "CLAIM_UNSTAKED",
    "CLAIM_REWARDS",
    "RESTAKE_REWARDS",
    "UNSTAKE",
    "SPLIT",
    "MERGE",
    "LOCK",
    "UNLOCK",
    "SUPPLY",
    "BRIDGE",
    "VOTE",
    "REVOKE",
    "RESTAKE",
    "REBOND",
    "WITHDRAW",
    "WITHDRAW_ALL",
    "CREATE_ACCOUNT",
    "REVEAL",
    "MIGRATE",
    "DELEGATE",
    "UNDELEGATE",
    "UTXO_P_TO_C_IMPORT",
    "UTXO_C_TO_P_IMPORT",
    "WRAP",
    "UNWRAP",
    "UNFREEZE_LEGACY",
    "UNFREEZE_LEGACY_BANDWIDTH",
    "UNFREEZE_LEGACY_ENERGY",
    "UNFREEZE_BANDWIDTH",
    "UNFREEZE_ENERGY",
    "FREEZE_BANDWIDTH",
    "FREEZE_ENERGY",
    "UNDELEGATE_BANDWIDTH",
    "UNDELEGATE_ENERGY",
    "P2P_NODE_REQUEST",
    "CREATE_EIGENPOD",
    "VERIFY_WITHDRAW_CREDENTIALS",
    "START_CHECKPOINT",
    "VERIFY_CHECKPOINT_PROOFS",
    "QUEUE_WITHDRAWALS",
    "COMPLETE_QUEUED_WITHDRAWALS",
    "LUGANODES_PROVISION",
    "LUGANODES_EXIT_REQUEST",
    "INFSTONES_PROVISION",
    "INFSTONES_EXIT_REQUEST",
    "INFSTONES_CLAIM_REQUEST",
  ] as const),
  hash: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  broadcastedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  signedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    null,
  ]),
  unsignedTransaction: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
  ]),
  annotatedTransaction: faker.helpers.arrayElement([{}, undefined]),
  structuredTransaction: faker.helpers.arrayElement([{}, undefined]),
  stepIndex: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gasEstimate: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  explorerUrl: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  isMessage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getNetworksControllerGetNetworksResponseMock = (): NetworkDto[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([
      "ethereum",
      "ethereum-goerli",
      "ethereum-holesky",
      "ethereum-sepolia",
      "ethereum-hoodi",
      "arbitrum",
      "base",
      "base-sepolia",
      "gnosis",
      "optimism",
      "polygon",
      "polygon-amoy",
      "starknet",
      "zksync",
      "linea",
      "unichain",
      "avalanche-c",
      "avalanche-c-atomic",
      "avalanche-p",
      "binance",
      "celo",
      "fantom",
      "harmony",
      "moonriver",
      "okc",
      "viction",
      "core",
      "sonic",
      "katana",
      "agoric",
      "akash",
      "axelar",
      "band-protocol",
      "bitsong",
      "canto",
      "chihuahua",
      "comdex",
      "coreum",
      "cosmos",
      "crescent",
      "cronos",
      "cudos",
      "desmos",
      "dydx",
      "evmos",
      "fetch-ai",
      "gravity-bridge",
      "injective",
      "irisnet",
      "juno",
      "kava",
      "ki-network",
      "mars-protocol",
      "nym",
      "okex-chain",
      "onomy",
      "osmosis",
      "persistence",
      "quicksilver",
      "regen",
      "secret",
      "sentinel",
      "sommelier",
      "stafi",
      "stargaze",
      "stride",
      "teritori",
      "tgrade",
      "umee",
      "sei",
      "mantra",
      "celestia",
      "saga",
      "zetachain",
      "dymension",
      "humansai",
      "neutron",
      "polkadot",
      "kusama",
      "westend",
      "bittensor",
      "binancebeacon",
      "cardano",
      "near",
      "solana",
      "solana-devnet",
      "stellar",
      "stellar-testnet",
      "tezos",
      "tron",
      "ton",
      "ton-testnet",
    ] as const),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    category: faker.helpers.arrayElement([
      "evm",
      "cosmos",
      "substrate",
      "misc",
    ] as const),
    logoURI: faker.string.alpha({ length: { min: 10, max: 20 } }),
  }));

export const getProvidersControllerGetProvidersResponseMock =
  (): ProvidersControllerGetProviders200 => ({
    ...{
      total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      offset: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      limit: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
    },
    ...{
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          id: faker.string.alpha({ length: { min: 10, max: 20 } }),
          logoURI: faker.string.alpha({ length: { min: 10, max: 20 } }),
          description: faker.string.alpha({ length: { min: 10, max: 20 } }),
          website: faker.string.alpha({ length: { min: 10, max: 20 } }),
          tvlUsd: {},
          type: faker.helpers.arrayElement([
            "protocol",
            "validator_provider",
          ] as const),
          references: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
        })),
        undefined,
      ]),
    },
  });

export const getProvidersControllerGetProviderResponseMock = (
  overrideResponse: Partial<ProviderDto> = {},
): ProviderDto => ({
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  logoURI: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  website: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tvlUsd: {},
  type: faker.helpers.arrayElement(["protocol", "validator_provider"] as const),
  references: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getHealthControllerHealthResponseMock = (
  overrideResponse: Partial<HealthStatusDto> = {},
): HealthStatusDto => ({
  status: faker.helpers.arrayElement(Object.values(HealthStatus)),
  timestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getYieldsControllerGetYieldsMockHandler = (
  overrideResponse?:
    | YieldsControllerGetYields200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<YieldsControllerGetYields200>
        | YieldsControllerGetYields200),
) => {
  return http.get("*/v1/yields", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetYieldsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getYieldsControllerGetAggregateBalancesMockHandler = (
  overrideResponse?:
    | BalancesResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<BalancesResponseDto> | BalancesResponseDto),
) => {
  return http.post("*/v1/yields/balances", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetAggregateBalancesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getYieldsControllerGetYieldMockHandler = (
  overrideResponse?:
    | YieldDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<YieldDto> | YieldDto),
) => {
  return http.get("*/v1/yields/:yieldId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetYieldResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getYieldsControllerGetYieldBalancesLegacyMockHandler = (
  overrideResponse?:
    | YieldBalancesDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<YieldBalancesDto> | YieldBalancesDto),
) => {
  return http.get("*/v1/yields/:yieldId/balances", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetYieldBalancesLegacyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getYieldsControllerGetYieldBalancesMockHandler = (
  overrideResponse?:
    | YieldBalancesDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<YieldBalancesDto> | YieldBalancesDto),
) => {
  return http.post("*/v1/yields/:yieldId/balances", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetYieldBalancesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getYieldsControllerGetYieldValidatorsMockHandler = (
  overrideResponse?:
    | YieldsControllerGetYieldValidators200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<YieldsControllerGetYieldValidators200>
        | YieldsControllerGetYieldValidators200),
) => {
  return http.get("*/v1/yields/:yieldId/validators", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getYieldsControllerGetYieldValidatorsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getActionsControllerGetActionsMockHandler = (
  overrideResponse?:
    | ActionsControllerGetActions200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ActionsControllerGetActions200>
        | ActionsControllerGetActions200),
) => {
  return http.get("*/v1/actions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getActionsControllerGetActionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getActionsControllerGetActionMockHandler = (
  overrideResponse?:
    | ActionDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ActionDto> | ActionDto),
) => {
  return http.get("*/v1/actions/:actionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getActionsControllerGetActionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getActionsControllerEnterYieldMockHandler = (
  overrideResponse?:
    | ActionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ActionDto> | ActionDto),
) => {
  return http.post("*/v1/actions/enter", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getActionsControllerEnterYieldResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getActionsControllerExitYieldMockHandler = (
  overrideResponse?:
    | ActionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ActionDto> | ActionDto),
) => {
  return http.post("*/v1/actions/exit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getActionsControllerExitYieldResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getActionsControllerManageYieldMockHandler = (
  overrideResponse?:
    | ActionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ActionDto> | ActionDto),
) => {
  return http.post("*/v1/actions/manage", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getActionsControllerManageYieldResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTransactionsControllerSubmitTransactionHashMockHandler = (
  overrideResponse?:
    | TransactionDto
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TransactionDto> | TransactionDto),
) => {
  return http.put(
    "*/v1/transactions/:transactionId/submit-hash",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getTransactionsControllerSubmitTransactionHashResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getTransactionsControllerSubmitTransactionMockHandler = (
  overrideResponse?:
    | TransactionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TransactionDto> | TransactionDto),
) => {
  return http.post("*/v1/transactions/:transactionId/submit", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTransactionsControllerSubmitTransactionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTransactionsControllerGetTransactionMockHandler = (
  overrideResponse?:
    | TransactionDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TransactionDto> | TransactionDto),
) => {
  return http.get("*/v1/transactions/:transactionId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTransactionsControllerGetTransactionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getNetworksControllerGetNetworksMockHandler = (
  overrideResponse?:
    | NetworkDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NetworkDto[]> | NetworkDto[]),
) => {
  return http.get("*/v1/networks", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getNetworksControllerGetNetworksResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getProvidersControllerGetProvidersMockHandler = (
  overrideResponse?:
    | ProvidersControllerGetProviders200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ProvidersControllerGetProviders200>
        | ProvidersControllerGetProviders200),
) => {
  return http.get("*/v1/providers", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getProvidersControllerGetProvidersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getProvidersControllerGetProviderMockHandler = (
  overrideResponse?:
    | ProviderDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProviderDto> | ProviderDto),
) => {
  return http.get("*/v1/providers/:providerId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getProvidersControllerGetProviderResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getHealthControllerHealthMockHandler = (
  overrideResponse?:
    | HealthStatusDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthStatusDto> | HealthStatusDto),
) => {
  return http.get("*/health", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getHealthControllerHealthResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getYieldXyzAPIMock = () => [
  getYieldsControllerGetYieldsMockHandler(),
  getYieldsControllerGetAggregateBalancesMockHandler(),
  getYieldsControllerGetYieldMockHandler(),
  getYieldsControllerGetYieldBalancesLegacyMockHandler(),
  getYieldsControllerGetYieldBalancesMockHandler(),
  getYieldsControllerGetYieldValidatorsMockHandler(),
  getActionsControllerGetActionsMockHandler(),
  getActionsControllerGetActionMockHandler(),
  getActionsControllerEnterYieldMockHandler(),
  getActionsControllerExitYieldMockHandler(),
  getActionsControllerManageYieldMockHandler(),
  getTransactionsControllerSubmitTransactionHashMockHandler(),
  getTransactionsControllerSubmitTransactionMockHandler(),
  getTransactionsControllerGetTransactionMockHandler(),
  getNetworksControllerGetNetworksMockHandler(),
  getProvidersControllerGetProvidersMockHandler(),
  getProvidersControllerGetProviderMockHandler(),
  getHealthControllerHealthMockHandler(),
];
